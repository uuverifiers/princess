Loading datatype.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading datatype4b.smt2 ...
Warning: assuming that recursive function f0 is partial
Warning: assuming that recursive function f1 is partial
Warning: assuming that recursive function f2 is partial
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x11 () Term (list (cons (int 43) nil)))
  (define-fun x10 () Term (int 17))
  (define-fun x9 () Term (list nil))
  (define-fun x8 () Term (int 42))
  (define-fun x7 () Term (list (cons (int 17) (cons (int 43) nil))))
  (define-fun x67 () Term (list (cons (int 42) nil)))
  (define-fun x5 () Term (int 17))
  (define-fun x4 () Term (list (cons (int 43) nil)))
  (define-fun x3 () Term (list (cons (int 17) (cons (int 42) nil))))
  (define-fun x2 () Term (int 43))
  (define-fun x1 () Term (list (cons (int 43) (cons (int 17) (cons (int 42) nil)))))
  (define-fun f0 ((x!0 Term)) Bool (ite (= x!0 (int 43)) true (ite (= x!0 (int 17)) true (ite (= x!0 (int 42)) true true))))
  (define-fun f2 ((x!0 Term)) Bool (ite (= x!0 (list (cons (int 43) (cons (int 17) (cons (int 42) nil))))) true true))
  (define-fun f1 ((x!0 TList)) Bool (ite (= x!0 nil) true (ite (= x!0 (cons (int 43) (cons (int 17) (cons (int 42) nil)))) true (ite (= x!0 (cons (int 17) (cons (int 42) nil))) true (ite (= x!0 (cons (int 42) nil)) true true)))))
)
Loading datatype4c.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x4 () Term (list (cons (int 53) nil)))
  (define-fun x3 () Term (list (cons (int 55) nil)))
  (define-fun x2 () Term (int 53))
  (define-fun x1 () Term (list (cons (int 53) (cons (int 55) nil))))
)
Loading datatype6.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun t () Tree (node (cons 1 nil) leaf (node (cons 0 nil) leaf (node nil leaf leaf))))
)
Loading datatype6b.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun b () List nil)
  (define-fun a () List (cons 0 nil))
)
Loading cvc-datatype-1.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun _let_3_0 () tree (leaf zero))
  (define-fun x3 () tree (leaf zero))
  (define-fun x2 () list (cons (node null) null))
  (define-fun x1 () nat (succ zero))
)
Loading adt-model-bug.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () ListT1 (insertT1 T1!16 (insertT1 T1!20 (insertT1 T1!24 nilT1))))
)
Loading quoted-datatype.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading polymorphicList.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun l3 () (List (List Int)) (cons (cons 9 (as nil (List Int))) (as nil (List (List Int)))))
  (define-fun l2 () (List Bool) (cons true (as nil (List Bool))))
  (define-fun l () (List Int) (cons 9 (as nil (List Int))))
)
Loading polymorphicList2.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading polymorphicList3.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun l3 () (List (List Int)) (cons (cons (- 1) (cons 11 (as nil (List Int)))) (cons (cons 0 (as nil (List Int))) (as nil (List (List Int))))))
  (define-fun l () (List Int) (cons (- 1) (cons 11 (as nil (List Int)))))
)
Loading polymorphicPairs.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () (Either Int Bool) ((as Left (Either Int Bool)) 4))
  (define-fun x () (Pair Int Bool) ((as Pair (Pair Int Bool)) 4 false))
)
Loading emptyPar.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () T (T 1 3))
)
Loading datatype2.smt2 ...
unsat
unsat
sat
((y 2) (y2 1))
sat
unsat
Loading datatype3.smt2 ...
sat
sat
(((data (right x)) 42))
unsat
sat
((y 43) (y2 43))
unsat
((= (data x) 1))
unsat
((not (= (_size x) 3)))
Loading datatype3b.smt2 ...
sat
sat
(((data (right x)) 42))
unsat
sat
((y 43) (y2 43))
unsat
((= (data x) 1))
unsat
((not (= (_size x) 3)))
Loading datatype3c.smt2 ...
sat
sat
(((data (head (children x))) 42))
unsat
unsat
sat
((y2 42))
unsat
((not (= (_size x) 5)))
Loading datatype4.smt2 ...
sat
Loading datatype4b.smt2 ...
Warning: assuming that recursive function f0 is partial
Warning: assuming that recursive function f1 is partial
Warning: assuming that recursive function f2 is partial
sat
(model
  (define-fun x11 () Term (list (cons (int 43) nil)))
  (define-fun x10 () Term (int 17))
  (define-fun x9 () Term (list nil))
  (define-fun x8 () Term (int 42))
  (define-fun x7 () Term (list (cons (int 17) (cons (int 43) nil))))
  (define-fun x67 () Term (list (cons (int 42) nil)))
  (define-fun x5 () Term (int 17))
  (define-fun x4 () Term (list (cons (int 43) nil)))
  (define-fun x3 () Term (list (cons (int 17) (cons (int 42) nil))))
  (define-fun x2 () Term (int 43))
  (define-fun x1 () Term (list (cons (int 43) (cons (int 17) (cons (int 42) nil)))))
  (define-fun f2 ((x!0 Term)) Bool (ite (= x!0 (list (cons (int 43) (cons (int 17) (cons (int 42) nil))))) true true))
  (define-fun f1 ((x!0 TList)) Bool (ite (= x!0 nil) true (ite (= x!0 (cons (int 43) (cons (int 17) (cons (int 42) nil)))) true (ite (= x!0 (cons (int 17) (cons (int 42) nil))) true (ite (= x!0 (cons (int 42) nil)) true true)))))
  (define-fun f0 ((x!0 Term)) Bool (ite (= x!0 (int 43)) true (ite (= x!0 (int 17)) true (ite (= x!0 (int 42)) true true))))
)
Loading datatype4c.smt2 ...
sat
(model
  (define-fun x4 () Term (list (cons (int 53) nil)))
  (define-fun x3 () Term (list (cons (int 55) nil)))
  (define-fun x2 () Term (int 53))
  (define-fun x1 () Term (list (cons (int 53) (cons (int 55) nil))))
)
Loading datatype5.smt2 ...
sat
(model
  (define-fun z () S C)
  (define-fun y () S A)
  (define-fun x () S B)
)
unsat
Loading datatype6.smt2 ...
sat
(model
  (define-fun t () Tree (node (cons 1 nil) leaf (node (cons 0 nil) leaf (node nil leaf leaf))))
)
Loading datatype6b.smt2 ...
sat
(model
  (define-fun b () List nil)
  (define-fun a () List (cons 0 nil))
)
Loading cvc-datatype-1.smt2 ...
sat
(model
  (define-fun x3 () tree (leaf zero))
  (define-fun x2 () list (cons (node null) null))
  (define-fun x1 () nat (succ zero))
)
Loading adt-model-bug.smt2 ...
sat
(model
  (define-fun x () ListT1 (insertT1 T1!16 (insertT1 T1!20 (insertT1 T1!24 nilT1))))
)
Loading quoted-datatype.smt2 ...
unsat
Loading polymorphicList.smt2 ...
sat
(model
  (define-fun l3 () (List (List Int)) (cons (cons 9 (as nil (List Int))) (as nil (List (List Int)))))
  (define-fun l2 () (List Bool) (cons true (as nil (List Bool))))
  (define-fun l () (List Int) (cons 9 (as nil (List Int))))
)
Loading polymorphicList2.smt2 ...
unsat
Loading polymorphicList3.smt2 ...
sat
(model
  (define-fun l3 () (List (List Int)) (cons (cons (- 1) (cons 11 (as nil (List Int)))) (cons (cons 0 (as nil (List Int))) (as nil (List (List Int))))))
  (define-fun l () (List Int) (cons (- 1) (cons 11 (as nil (List Int)))))
)
Loading polymorphicPairs.smt2 ...
sat
(model
  (define-fun y () (Either Int Bool) ((as Left (Either Int Bool)) 4))
  (define-fun x () (Pair Int Bool) ((as Pair (Pair Int Bool)) 4 false))
)
Loading emptyPar.smt2 ...
sat
(model
  (define-fun x () T (T 1 3))
)
Loading datatype.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading datatype6b.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun b () List nil)
  (define-fun a () List (cons 0 nil))
)
Loading cvc-datatype-1.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun _let_3_0 () tree (leaf zero))
  (define-fun x3 () tree (leaf (succ zero)))
  (define-fun x2 () list null)
  (define-fun x1 () nat (succ (succ zero)))
)
Loading datatype2.smt2 ...
unsat
unsat
sat
((y 2) (y2 1))
sat
unsat
Loading datatype3.smt2 ...
sat
sat
(((data (right x)) 42))
unsat
sat
((y 43) (y2 43))
unsat
((= (data x) 1))
unsat
((not (is-leaf (right x))))
Loading datatype3b.smt2 ...
sat
sat
(((data (right x)) 42))
unsat
sat
((y 43) (y2 43))
unsat
((= (data x) 1))
unsat
((not (is-leaf (right x))))
Loading datatype3c.smt2 ...
sat
sat
(((data (head (children x))) 42))
unsat
unsat
sat
((y2 42))
unsat
((not (is-nil (tail (children x)))))
Loading datatype4.smt2 ...
sat
Loading datatype5.smt2 ...
sat
(model
  (define-fun z () S C)
  (define-fun y () S A)
  (define-fun x () S B)
)
unsat
Loading datatype6b.smt2 ...
sat
(model
  (define-fun b () List nil)
  (define-fun a () List (cons 0 nil))
)
Loading cvc-datatype-1.smt2 ...
sat
(model
  (define-fun x3 () tree (leaf (succ zero)))
  (define-fun x2 () list (cons (leaf zero) null))
  (define-fun x1 () nat (succ (succ zero)))
)
