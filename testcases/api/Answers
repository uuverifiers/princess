
TestSaturationProcedure
Valid
Unsat

interpolation-bug.scala
0: Unsat
1: Vector(rootjthen_fwd, false)

scope-bug.scala
0: Sat
1: Sat
2: Sat
3: Sat
4: 1
5: 3
6: 2
7: Sat
8: Unsat
10b: Sat
11: 1
12: 3
13: -5

incrementality-bug.scala
59: Sat
72: 0
73: Invalid

getConstraint-bug.scala
39: Valid
40: true

TheoryTest.scala
Sat
List((Vector(0, 1),2), (Vector(1, 2),3))
Sat
List((Vector(0, 2),1), (Vector(0, 1),2), (Vector(1, 2),3))
Unsat
Valid

TheoryTest2.scala
Unsat
Inconclusive
{c -> 3, b -> 2, a -> 1, mul(2, 1) -> 3, mul(1, 2) -> 3}
Unsat
Unsat

TheoryTest3.scala
Unsat

TypeTests.scala
Starting
\exists int v0, v1; v1 = x + v0
Sat
\exists nat v0; v0 = x
Sat
\forall nat v0; x = v0
Unsat
\exists nat v0; x = y + v0 <-> x >= y
Valid
\exists int[0, 9] v0; v0 - x >= 1
\exists int[0, 9] v0; v0 - x >= 1
8 >= x
Valid
Unsat
x1 = x2
Unsat
Valid
Valid
14 >= X & X >= 11
Sat
10
Unsat
Unsat
Unsat
Finished

nonlinear.scala
0: Sat
{c1 -> 1, c0 -> 4}
1: Sat
{c1 -> 3, c0 -> 3}
2: Unsat
3: Invalid
{c0 -> -1}
4: Valid
5: Valid

nonlinearInterpolation.scala
Unsat
Vector(!(c1 = 3))

division.scala
0: Sat
{c0 -> 8}
1: Sat
{c0 -> 7}
2: Invalid
{c0 -> -4}
3: Invalid
{c1 -> 2, c0 -> 1}
4: Valid

deadlock.scala
starting
Sat
getting model ...
{}
finished

exception.scala
starting
x
{}
y
finished

incremental.scala
starting
Sat
{z -> 3, y -> -1, x -> 0, a -> false}
Sat
{z -> 5, y -> 1, x -> 2, a -> true}
Sat
Sat
{z -> 5, y -> 1, x -> 2, a -> true}
finished

divmodprint.scala
starting
(div x 5)
(div x (- 5))
(div (* (- 1) x) 5)
(div (* (- 1) x) (- 5))
(mod x 5)
(mod x (- 5))
(mod (* (- 1) x) 5)
(mod (* (- 1) x) (- 5))
(_eps ((var0 Int)) (and (<= 0 var0) (or (= var0 x) (= (* (- 1) var0) x))))
finished

pred-simplify.scala
starting
c = 4 & !p
p | c = 4
finished

empty-stack-bug.scala
Sat
0

variable-names-bug.scala
0: Sat

TestModuloArithmetic.scala
Test 1
Sat
{b2 -> mod_cast(0, 255, 0), b1 -> mod_cast(0, 255, 13)}
b1 = mod_cast(0, 255, 13)
Test 2
Sat
{w2 -> mod_cast(0, 4294967295, 0), w1 -> mod_cast(0, 4294967295, 13)}
Test 3
Sat
h1 = mod_cast(0, 65535, 11007)
Unsat
Test 4
Valid
Test 5
Valid
Test 6
Valid
Test 7
Unsat
Vector((x = mod_cast(0, 1, 1)), (y = mod_cast(0, 1, 1)))
Test 8
\exists bv[2] v0; bv_mul(2, x, v0) = 1.\as[bv[2]]
x = 1.\as[bv[2]] | x.\as[int] >= 3
Valid
Test 9
Unsat
Vector((130 + a.\as[int]).\as[bv[8]] = b & (b.\as[int] - a.\as[int] >= 130 | a.\as[int] - b.\as[int] >= 126 | a.\as[int] >= 254), b.\as[int] >= 130, b.\as[int] >= c.\as[int])
Test 10
(b != 0.\as[bv[8]] | a != 255.\as[bv[8]]) & (a != 255.\as[bv[8]] | b.\as[int] >= 245 | 0 >= b.\as[int]) & (b.\as[int] - a.\as[int] >= 2 | 244 >= b.\as[int])

TreeInterpolation.scala
Unsat
List(1, 3, 5, 10, 20, 40)
false
   (d = 0)
      (b = 1)
      ((1 + (d + -1 * c)) = 0)
   (e = 5)

TestFrame.scala
Sat
Unsat
Sat
Inconclusive
Unsat
x - y >= 2

dnfTest.scala
List((P1 != 0), (P0 != 0), (P4 = 0), (P3 = 0), (P2 = 0), (P30 + -1*P31 = 0 & P28 + -1*P29 = 0 & P26 + -1*P27 = 0 & P24 + -1*P25 = 0 & P22 + -1*P23 = 0 & P20 + -1*P21 = 0 & P18 + -1*P19 = 0 & P16 + -1*P17 = 0 & P15 = 0 & P8 = 0 & P9 = 0 & P10 = 0 & P11 = 0 & P6 = 0 & P7 = 0 & P5 = 0 & P14 != 0 & P13 != 0 & P12 != 0), (P30 + -1*P31 = 0 & P28 + -1*P29 = 0 & P26 + -1*P27 = 0 & P24 + -1*P25 = 0 & P22 + -1*P23 = 0 & P20 + -1*P21 = 0 & P18 + -1*P19 = 0 & P16 + -1*P17 = 0 & P15 = 0 & P8 = 0 & P9 = 0 & P10 = 0 & P7 = 0 & P5 = 0 & P14 != 0 & P13 != 0 & P12 != 0 & P11 != 0 & P6 != 0), (P30 + -1*P31 = 0 & P28 + -1*P29 = 0 & P26 + -1*P27 = 0 & P24 + -1*P25 = 0 & P22 + -1*P23 = 0 & P20 + -1*P21 = 0 & P18 + -1*P19 = 0 & P16 + -1*P17 = 0 & P15 = 0 & P8 = 0 & P9 = 0 & P11 = 0 & P6 = 0 & P5 = 0 & P14 != 0 & P13 != 0 & P12 != 0 & P10 != 0 & P7 != 0), (P30 + -1*P31 = 0 & P28 + -1*P29 = 0 & P26 + -1*P27 = 0 & P24 + -1*P25 = 0 & P22 + -1*P23 = 0 & P20 + -1*P21 = 0 & P18 + -1*P19 = 0 & P16 + -1*P17 = 0 & P15 = 0 & P8 = 0 & P9 = 0 & P5 = 0 & P14 != 0 & P13 != 0 & P12 != 0 & P10 != 0 & P11 != 0 & P6 != 0 & P7 != 0), (P30 + -1*P31 = 0 & P28 + -1*P29 = 0 & P26 + -1*P27 = 0 & P24 + -1*P25 = 0 & P22 + -1*P23 = 0 & P20 + -1*P21 = 0 & P18 + -1*P19 = 0 & P16 + -1*P17 = 0 & P15 = 0 & P8 = 0 & P10 = 0 & P11 = 0 & P6 = 0 & P7 = 0 & P14 != 0 & P13 != 0 & P12 != 0 & P9 != 0 & P5 != 0), (P30 + -1*P31 = 0 & P28 + -1*P29 = 0 & P26 + -1*P27 = 0 & P24 + -1*P25 = 0 & P22 + -1*P23 = 0 & P20 + -1*P21 = 0 & P18 + -1*P19 = 0 & P16 + -1*P17 = 0 & P15 = 0 & P8 = 0 & P11 = 0 & P6 = 0 & P14 != 0 & P13 != 0 & P12 != 0 & P9 != 0 & P10 != 0 & P7 != 0 & P5 != 0), (P6 != 0 & P7 != 0 & P5 != 0), (P30 + -1*P31 = 0 & P28 + -1*P29 = 0 & P26 + -1*P27 = 0 & P24 + -1*P25 = 0 & P22 + -1*P23 = 0 & P20 + -1*P21 = 0 & P18 + -1*P19 = 0 & P16 + -1*P17 = 0 & P15 = 0 & P8 = 0 & P10 = 0 & P14 != 0 & P13 != 0 & P12 != 0 & P9 != 0 & P11 != 0 & P6 != 0 & P5 != 0))

dnfTest2.scala
ArrayBuffer(((60 + -1 * x) >= 0), ((x + -62) >= 0))

dnfTest3.scala
((P32 != 0 & P7 - 2 >= 100000) | (P7 - 2 < 100000 & P32 = 0)) & (P18 != 0 | P19 = 0) & (P19 != 0 | (P19 = 0 & P33 = 0)) & (P19 != 0 | 0 < P2) & (P19 != 0 | P5 = app0) & (P19 != 0 | (P1 >= 0 & 256 - P1 >= 1 & P27 = 256*P0 + P1 & P26 = P1)) & (P19 != 0 | P28 = P27) & (P19 != 0 | P29 = P2 + P7 - 2) & (P19 != 0 | P31 = P3) & (P19 != 0 | (P23 != 0 & P26 != 10) | (P26 = 10 & P23 = 0)) & (P21 != 0 | (P19 = 0 & P21 = 0)) & (P21 != 0 | 0 < P4) & (P21 != 0 | P24 = app1) & (P21 != 0 | P25 = P4 + P7 - 2) & (P21 != 0 | P6 = P20) & (P21 != 0 | P20 = P24) & (P21 = 0 | (P18 = 0 & P19 = 0)) & (P18 != 0 | P19 != 0 | P23 != 0) & (P18 != 0 | P19 != 0 | P6 = P17) & (P18 != 0 | P19 != 0 | P17 = P22) & (P19 != 0 | P21 != 0 | P23 = 0) & (P19 != 0 | P32 = 0 | P33 != 0) & (P19 != 0 | 0 >= P2 | 0 < P29) & (P21 != 0 | 0 >= P4 | 0 < P25) & store(P30, P29, P28) = app0 & store(P22, P25, 20) = app1
ArrayBuffer((((((((((((((((((((((!(((P7 + -2) + -100000) >= 0) & (P33 = 0)) & !(-1 * P2 >= 0)) & (P5 = app0)) & (P1 >= 0)) & (((256 + -1 * P1) + -1) >= 0)) & (P27 = (256 * P0 + P1))) & (P26 = P1)) & (P28 = P27)) & (P29 = (P2 + (P7 + -2)))) & (P31 = P3)) & !(P26 = 10)) & (P18 = 0)) & (P19 = 0)) & !(P23 = 0)) & (P6 = P17)) & (P17 = P22)) & (P32 = 0)) & !(-1 * P29 >= 0)) & !(P21 = 0)) & (store(P30, P29, P28) = app0)) & (store(P22, P25, 20) = app1)), (((((((((((((((((((((((!(((P7 + -2) + -100000) >= 0) & (P33 = 0)) & !(-1 * P2 >= 0)) & (P5 = app0)) & (P27 = (256 * P0 + P1))) & (P26 = P1)) & (P28 = P27)) & (P29 = (P2 + (P7 + -2)))) & (P31 = P3)) & (P26 = 10)) & (P19 = 0)) & !(-1 * P4 >= 0)) & (P24 = app1)) & (P25 = (P4 + (P7 + -2)))) & (P6 = P20)) & (P20 = P24)) & (P21 = 0)) & !(P18 = 0)) & (P23 = 0)) & (P32 = 0)) & !(-1 * P29 >= 0)) & !(-1 * P25 >= 0)) & (store(P30, P29, P28) = app0)) & (store(P22, P25, 20) = app1)))

TestStrings.scala
Sat
x = str_cons(mod_cast(0, 255, 97), str_cons(mod_cast(0, 255, 98), str_cons(mod_cast(0, 255, 99), str_empty)))
x = "abc"
Sat
y = str_empty
z = str_cons(mod_cast(0, 255, 97), str_cons(mod_cast(0, 255, 98), str_cons(mod_cast(0, 255, 99), str_cons(mod_cast(0, 255, 120), str_cons(mod_cast(0, 255, 121), str_cons(mod_cast(0, 255, 122), str_empty))))))
z = "abcxyz"
Sat
y = str_cons(mod_cast(0, 255, 122), str_empty)
z = str_cons(mod_cast(0, 255, 97), str_cons(mod_cast(0, 255, 98), str_cons(mod_cast(0, 255, 99), str_cons(mod_cast(0, 255, 122), str_cons(mod_cast(0, 255, 120), str_cons(mod_cast(0, 255, 121), str_cons(mod_cast(0, 255, 122), str_empty)))))))
z = "abczxyz"
Unsat
Sat
x = str_cons(mod_cast(0, 255, 0), str_cons(mod_cast(0, 255, 0), str_empty))
y = str_cons(mod_cast(0, 255, 0), str_cons(mod_cast(0, 255, 0), str_cons(mod_cast(0, 255, 0), str_cons(mod_cast(0, 255, 0), str_cons(mod_cast(0, 255, 0), str_empty)))))
Valid

simplifier-bug.scala
true
true
false
false
true
true
false
false

project-bug.scala
true

printBooleanTerm.scala
true
false
(not true)
(not false)
true
false
(not true)
(not false)

TestFunctionRange.scala
Valid

readSMTLIB.scala
x - y >= 1 & y - 50 >= 1
Sat
Unsat
x - y >= 1 & y - 50 >= 1
Sat
Unsat
x - y >= 1 & y - 50 >= 1
