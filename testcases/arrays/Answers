Loading downwardsPropagation.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading downwardsPropagation2.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun z () Int 3)
  (define-fun y () Int 2)
  (define-fun ar2 () (Array Int Int) (store ((as const (Array Int Int)) 4) 1 2))
  (define-fun ar () (Array Int Int) (store ((as const (Array Int Int)) 4) 1 3))
)
Loading constPropagation.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading arrays.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

unsat
Loading arrays2.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

unsat
Loading arrays3.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading arrays4.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun arr () (Array Int Int) (store (store ((as const (Array Int Int)) 4) 1 2) 2 3))
)
Loading arrays5.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun arr () (Array Int Bool) (store ((as const (Array Int Bool)) true) 2 false))
)
Loading arrays6.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading boolean-array.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun a () (Array Int Bool) ((as const (Array Int Bool)) true))
)
Loading array-sorted.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
)
Loading array-sorted-2.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () (Array Int O) (store (store ((as const (Array Int O)) O!8) 0 O!6) 1 O!6))
)
Loading extensionality1.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

unsat
Loading extensionality2.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

unsat
Loading extensionality3.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

unsat
Loading extensionality4.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun b () X (X (store (store ((as const (Array Int Int)) 6) 1 1) 2 2)))
  (define-fun a () X (X (store (store ((as const (Array Int Int)) 5) 1 1) 2 2)))
)
Loading extensionality4b.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun c () X (X (store (store (store ((as const (Array Int Int)) 9) 1 1) 2 2) 3 3)))
  (define-fun b () X (X (store (store (store ((as const (Array Int Int)) 9) 1 1) 2 2) 3 7)))
  (define-fun a () X (X (store (store ((as const (Array Int Int)) 8) 1 1) 2 2)))
)
Loading extensionality5.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun b () (Array Int Int) ((as const (Array Int Int)) 1))
  (define-fun a () (Array Int Int) ((as const (Array Int Int)) 1))
)
Loading extensionality6.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun b () (Array Int Int) (store (store ((as const (Array Int Int)) 43) 1 0) 42 0))
  (define-fun a () (Array Int Int) (store ((as const (Array Int Int)) 43) 1 0))
)
Loading quantifiers.smt2 ...
Preprocessing ...
Constructing countermodel ...

unknown
(model
  (define-fun a () (Array Int Int) (store ((as const (Array Int Int)) 1) 0 0))
)
Loading lambda.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading lambda2.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading lambda3.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading decoding.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun b () (Array Int Int) ((as const (Array Int Int)) 0))
  (define-fun a () (Array Int Int) (store ((as const (Array Int Int)) 0) 0 1))
)
