Loading simple-heap.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap-sat.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun H2 () Heap (newHeap (alloc (newHeap (alloc emptyHeap (WrappedInt 10))) (Wrappedsimple (simple 42)))))
  (define-fun H1 () Heap (newHeap (alloc emptyHeap (WrappedInt 10))))
)
Loading read-interpolation-1.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 58), simplifying (40), interpolating ...

unsat
(
  (= (getInt (read h2 a)) 42)
)
Loading read-interpolation-1b.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 31), simplifying (59), interpolating ...

unsat
(
  (or (<= 0 (* (- 1) a)) (or (<= 0 (+ (- 1) (+ (* (- 1) (counteraddr h2)) a))) (= (getInt (read h2 a)) 42)))
)
Loading read-interpolation-2.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 43), simplifying (47), interpolating ...

unsat
(
  (and (not (= a2 a)) (and (<= 0 (+ (- 1) a2)) (<= 0 (+ (- 1) a))))
  (and (and (not (= a2 a)) (and (<= 0 (+ (- 1) a2)) (<= 0 (+ (- 1) a)))) (<= 0 (+ (- 1) (* (- 1) (getInt (read h a2))))))
  (<= 0 (+ (- 1) (* (- 1) (getInt (read h2 a2)))))
  (<= 0 (+ (- 1) (* (- 1) (getInt (read h2 a2)))))
)
Loading read-interpolation-3.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 40), simplifying (49), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (<= 0 (+ (- 1) (getInt (read h2 a))))
)
Loading read-interpolation-4.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 74), simplifying (49), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (<= 0 (+ (- 1) (getInt (read h2 a))))
)
Loading read-interpolation-5.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 116), simplifying (68), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (and (not (= a2 a)) (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a2))) (<= 0 (+ (- 1) a)))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (and (and (not (= a2 a)) (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a2))) (<= 0 (+ (- 1) a)))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (and (and (not (= a2 a)) (and (<= 0 (+ (- 1) a2)) (<= 0 (+ (- 1) a)))) (<= 0 (+ (- 1) (getInt (read h2 a)))))
  (<= 0 (+ (- 1) (getInt (read h3 a))))
)
Loading simple-heap-allocAddr.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap-batch.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap-batch-dual.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading adt-addrrange-sat.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun ar () AddrRange (AddrRange (nthAddr 1) 3))
  (define-fun a () Addr (nthAddr 4))
  (define-fun h2 () Heap (newHeap (alloc (newBatchHeap (batchAlloc emptyHeap (WrappedInt 1) 3)) (Wrappedsimple (simple (AddrRange (nthAddr 1) 3))))))
  (define-fun h1 () Heap (newBatchHeap (batchAlloc emptyHeap (WrappedInt 1) 3)))
)
Loading adt-addrrange-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap-sat.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun H2 () Heap (newHeap (alloc (newHeap (alloc emptyHeap (WrappedInt 10))) (Wrappedsimple (simple 42)))))
  (define-fun H1 () Heap (newHeap (alloc emptyHeap (WrappedInt 10))))
)
Loading read-interpolation-1.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 36), simplifying (69), interpolating ...

unsat
(
  (and (valid h2 a) (= (getInt (read h2 a)) 42))
)
Loading read-interpolation-1b.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 34), simplifying (67), interpolating ...

unsat
(
  (or (not (valid h2 a)) (= (getInt (read h2 a)) 42))
)
Loading read-interpolation-2.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 115), simplifying (203), interpolating ...

unsat
(
  (and (and (valid h a) (valid h a2)) (not (= a2 a)))
  (and (and (valid h a2) (valid h a)) (and (not (= a2 a)) (<= 0 (+ (- 1) (* (- 1) (getInt (read h a2)))))))
  (and (valid h2 a2) (<= 0 (+ (- 1) (* (- 1) (getInt (read h2 a2))))))
  (and (valid h2 a2) (<= 0 (+ (- 1) (* (- 1) (getInt (read h2 a2))))))
)
Loading read-interpolation-3.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 78), simplifying (137), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (valid h a) (<= 0 (+ (- 1) x)))
  (and (valid h a) (<= 0 (+ (- 1) x)))
  (and (valid h2 a) (<= 0 (+ (- 1) (getInt (read h2 a)))))
)
Loading read-interpolation-4.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 85), simplifying (158), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (valid h a) (<= 0 (+ (- 1) x)))
  (and (valid h a) (<= 0 (+ (- 1) x)))
  (and (valid h2 a) (<= 0 (+ (- 1) (getInt (read h2 a)))))
)
Loading read-interpolation-5.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 142), simplifying (249), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (and (valid h a) (valid h a2)) (and (<= 0 (+ (- 1) x)) (not (= a2 a))))
  (and (and (valid h a2) (valid h a)) (and (not (= a2 a)) (<= 0 (+ (- 1) x))))
  (and (and (valid h2 a2) (valid h2 a)) (and (not (= a2 a)) (<= 0 (+ (- 1) (getInt (read h2 a))))))
  (and (valid h3 a) (<= 0 (+ (- 1) (getInt (read h3 a)))))
)
Loading simple-heap-allocAddr.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap-batch.smt2 ...
(error "Symbol BatchAllocResHeap not declared")
Loading simple-heap-batch-dual.smt2 ...
(error "Symbol batchAllocHeap not declared")
Loading heap-batch-write-read-1-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading heap-batch-write-read-2-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading adt-addrrange-sat.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun ar () AddrRange (AddrRange (nthAddr 1) 3))
  (define-fun a () Addr (nthAddr 4))
  (define-fun h2 () Heap (newHeap (alloc (newBatchHeap (batchAlloc emptyHeap (WrappedInt 1) 3)) (Wrappedsimple (simple (AddrRange (nthAddr 1) 3))))))
  (define-fun h1 () Heap (newBatchHeap (batchAlloc emptyHeap (WrappedInt 1) 3)))
)
Loading adt-addrrange-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading bug-model-1.smt2 ...
sat
(model
  (define-fun A2 () addr (nthaddr 1))
  (define-fun A () addr (nthaddr 2))
  (define-fun H () heap (newBatchheap (batchAlloc emptyheap defObj 2)))
)
Loading incremental-heap.smt2 ...
unsat
unsat
sat
(model
  (define-fun A2 () addr (nthaddr 2))
  (define-fun A () addr (nthaddr 1))
  (define-fun H2 () heap (newheap (alloc (newheap (alloc emptyheap (WrappedInt 10))) (Wrappedsimple (simple 42)))))
  (define-fun H () heap (newheap (alloc emptyheap (WrappedInt 10))))
)
Loading swap-interpolation.smt2 ...
unsat
unsat
((and (and (and (not (= z y)) (not (= z x))) (and (and (<= 0 (+ (- 1) z)) (<= 0 (+ (- 1) y))) (<= 0 (+ (- 1) x)))) (and (and (<= 0 (+ (counteraddr H) (* (- 1) z))) (<= 0 (+ (counteraddr H) (* (- 1) y)))) (and (is-WrappedInt (read H y)) (and (<= 0 (+ (counteraddr H) (* (- 1) y))) (<= 0 (+ (counteraddr H) (* (- 1) x)))))))
(and (and (not (= z x)) (and (and (<= 0 (+ (- 1) z)) (<= 0 (+ (- 1) y))) (<= 0 (+ (- 1) x)))) (and (and (and (<= 0 (+ (counteraddr H1) (* (- 1) y))) (and (<= 0 (+ (counteraddr H1) (* (- 1) x))) (or (and (= (read H1 z) (read H y)) (= (read H1 y) (read H y))) (and (= (read H1 y) (read H y)) (or (not (= y x)) (not (= (read H x) (read H y)))))))) (= (read H x) (read H1 z))) (is-WrappedInt (read H1 y))))
(and (<= 0 (+ (- 1) y)) (and (and (<= 0 (+ (counteraddr H2) (* (- 1) y))) (or (and (and (= (read H2 x) (read H y)) (<= 0 (+ (- 1) x))) (or (not (= y x)) (not (= (read H x) (read H y))))) (and (and (= (read H2 x) (read H2 z)) (= (read H y) (read H2 z))) (<= 0 (+ (- 1) x))))) (and (= (read H x) (read H2 z)) (<= 0 (+ (counteraddr H2) (* (- 1) y))))))
(and (= (read H3 x) (read H y)) (= (read H x) (read H3 y))))
Loading heap-batch-write-read-2-sat.smt2 ...
sat
(model
  (define-fun n () Int 2)
  (define-fun A2 () Addr (nthAddr 3))
  (define-fun A1 () Addr (nthAddr 3))
  (define-fun AR () AddrRange (AddrRange (nthAddr 1) 3))
  (define-fun H2 () Heap (newBatchHeap (batchAlloc emptyHeap (WrappedInt 42) 3)))
  (define-fun H () Heap (newBatchHeap (batchAlloc emptyHeap (WrappedInt 3) 3)))
)
