Loading simple-heap.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap-sat.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun H2 () Heap (newHeap (alloc (newHeap (alloc emptyHeap (WrappedInt 10))) (Wrappedsimple (simple 42)))))
  (define-fun H1 () Heap (newHeap (alloc emptyHeap (WrappedInt 10))))
)
Loading read-interpolation-1.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 58), simplifying (40), interpolating ...

unsat
(
  (= (getInt (read h2 a)) 42)
)
Loading read-interpolation-1b.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 31), simplifying (59), interpolating ...

unsat
(
  (or (<= 0 (* (- 1) a)) (or (<= 0 (+ (- 1) (+ (* (- 1) (counteraddr h2)) a))) (= (getInt (read h2 a)) 42)))
)
Loading read-interpolation-2.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 43), simplifying (47), interpolating ...

unsat
(
  (and (not (= a2 a)) (and (<= 0 (+ (- 1) a2)) (<= 0 (+ (- 1) a))))
  (and (and (not (= a2 a)) (and (<= 0 (+ (- 1) a2)) (<= 0 (+ (- 1) a)))) (<= 0 (+ (- 1) (* (- 1) (getInt (read h a2))))))
  (<= 0 (+ (- 1) (* (- 1) (getInt (read h2 a2)))))
  (<= 0 (+ (- 1) (* (- 1) (getInt (read h2 a2)))))
)
Loading read-interpolation-3.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 40), simplifying (49), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (<= 0 (+ (- 1) (getInt (read h2 a))))
)
Loading read-interpolation-4.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 74), simplifying (49), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (<= 0 (+ (- 1) (getInt (read h2 a))))
)
Loading read-interpolation-5.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 116), simplifying (68), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (and (not (= a2 a)) (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a2))) (<= 0 (+ (- 1) a)))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (and (and (not (= a2 a)) (and (and (<= 0 (+ (- 1) x)) (<= 0 (+ (- 1) a2))) (<= 0 (+ (- 1) a)))) (<= 0 (+ (counteraddr h) (* (- 1) a))))
  (and (and (not (= a2 a)) (and (<= 0 (+ (- 1) a2)) (<= 0 (+ (- 1) a)))) (<= 0 (+ (- 1) (getInt (read h2 a)))))
  (<= 0 (+ (- 1) (getInt (read h3 a))))
)
Loading alloc-interpolation-1.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 82), simplifying (84), interpolating ...

unsat
(
  true
  true
  (and (<= 0 (+ (- 1) a2)) (and (= (counteraddr h2) a2) (exists ((var0 HeapObject)) (and (= (getInt var0) 10) (exists ((var1 heap)) (and (= (+ (counteraddr var1) (* (- 1) a2)) (- 1)) (= (allocheap var1 var0) h2)))))))
  (and (<= 0 (+ (- 1) a2)) (and (= (counteraddr h2) a2) (exists ((var0 HeapObject)) (and (= (getInt var0) 10) (exists ((var1 heap)) (and (= (+ (counteraddr var1) (* (- 1) a2)) (- 1)) (= (allocheap var1 var0) h2)))))))
  (and (<= 0 (+ (- 1) a2)) (exists ((var0 HeapObject) (var1 HeapObject) (var2 heap)) (and (and (= (counteraddr (allocheap var2 var1)) a2) (= (allocheap (allocheap var2 var1) var0) h3)) (and (= (getInt var1) 10) (= (+ (counteraddr var2) (* (- 1) a2)) (- 1))))))
)
Loading alloc-interpolation-1b.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 52), simplifying (103), interpolating ...

unsat
(
  (and (<= 0 (+ (counteraddr h) (* (- 1) a))) (<= 0 (+ (- 1) a)))
  (and (and (<= 0 (+ (counteraddr h) (* (- 1) a))) (<= 0 (+ (- 1) a))) (getBool (read h a)))
  (and (<= 0 (+ (- 1) a)) (exists ((var0 HeapObject) (var1 heap)) (and (= (allocheap var1 var0) h2) (and (getBool (read var1 a)) (not (= (+ (counteraddr var1) (* (- 1) a)) (- 1)))))))
  false
  false
)
Loading alloc-interpolation-2.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 63), simplifying (124), interpolating ...

unsat
(
  (and (<= 0 (+ (counteraddr h) (* (- 1) a))) (<= 0 (+ (- 1) a)))
  (and (and (<= 0 (+ (counteraddr h) (* (- 1) a))) (<= 0 (+ (- 1) a))) (= (getInt2 (read h a)) (- 10)))
  (and (<= 0 (+ (- 1) a)) (and (<= 0 (+ (- 1) (+ (counteraddr h2) (* (- 1) a)))) (exists ((var0 HeapObject) (var1 heap)) (and (and (= (allocheap var1 var0) h2) (not (= (+ (counteraddr var1) (* (- 1) a)) (- 1)))) (= (getInt2 (read var1 a)) (- 10))))))
  (and (<= 0 (+ (- 1) a)) (exists ((var0 HeapObject) (var1 HeapObject) (var2 heap)) (and (and (= (allocheap (allocheap var2 var1) var0) h3) (not (= (+ (counteraddr (allocheap var2 var1)) (* (- 1) a)) (- 1)))) (and (not (= (+ (counteraddr var2) (* (- 1) a)) (- 1))) (= (getInt2 (read var2 a)) (- 10))))))
)
Loading alloc-interpolation-3.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 219), simplifying (266), interpolating ...

unsat
(
  (and (<= 0 (+ (- 1) a2)) (and (= (counteraddr h2) a2) (exists ((var0 HeapObject)) (and (= (getInt var0) x) (exists ((var1 heap)) (and (= (+ (counteraddr var1) (* (- 1) a2)) (- 1)) (= (allocheap var1 var0) h2)))))))
  (and (and (and (= (+ a3 (* (- 1) a2)) 1) (<= 0 (+ (- 1) a2))) (= (+ (counteraddr h3) (* (- 1) a2)) 1)) (exists ((var0 HeapObject)) (and (= (getInt var0) y) (exists ((var1 HeapObject) (var2 heap)) (and (and (= (counteraddr (allocheap var2 var1)) a2) (= (allocheap (allocheap var2 var1) var0) h3)) (and (= (getInt var1) x) (= (+ (counteraddr var2) (* (- 1) a2)) (- 1))))))))
  (and (and (and (= (+ a3 (* (- 1) a2)) 1) (<= 0 (+ (- 1) a2))) (and (= (+ (counteraddr h4) (* (- 1) a2)) 1) (= (getInt (read h4 a2)) x))) (= (+ (getInt (read h4 (+ 1 a2))) y) 0))
  (and (= (+ (getInt (read h5 a3)) y) 0) (= (+ (getInt (read h5 a2)) x) 0))
)
Loading alloc-interpolation-3b.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () Int 0)
  (define-fun x () Int 0)
  (define-fun a3 () addr (nthaddr 2))
  (define-fun a2 () addr (nthaddr 1))
  (define-fun h5 () heap (newheap (alloc (newheap (alloc emptyheap (AnInt (- 10)))) (AnInt (- 7)))))
  (define-fun h4 () heap (newheap (alloc (newheap (alloc emptyheap (ABool false))) (AnInt (- 7)))))
  (define-fun h3 () heap (newheap (alloc (newheap (alloc emptyheap (ABool false))) (AnInt 7))))
)
Loading alloc-interpolation-3c.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 104), simplifying (187), interpolating ...

unsat
(
  (and (<= 0 (+ (counteraddr h3) (* (- 1) a2))) (<= 0 (+ (- 1) a2)))
  (and (and (<= 0 (+ (- 1) a3)) (<= 0 (+ (- 1) a2))) (and (<= 0 (+ (counteraddr h3) (* (- 1) a3))) (<= 0 (+ (counteraddr h3) (* (- 1) a2)))))
  (and (and (not (= a3 a2)) (and (<= 0 (+ (- 1) a3)) (<= 0 (+ (- 1) a2)))) (and (<= 0 (+ (counteraddr h3) (* (- 1) a3))) (<= 0 (+ (counteraddr h3) (* (- 1) a2)))))
  (and (and (not (= a3 a2)) (and (<= 0 (+ (- 1) a3)) (<= 0 (+ (- 1) a2)))) (and (and (<= 0 (+ (counteraddr h3) (* (- 1) a3))) (<= 0 (+ (counteraddr h3) (* (- 1) a2)))) (= (getInt (read h3 a2)) x)))
  (and (and (not (= a3 a2)) (and (<= 0 (+ (- 1) a3)) (<= 0 (+ (- 1) a2)))) (and (and (and (<= 0 (+ (counteraddr h3) (* (- 1) a3))) (<= 0 (+ (counteraddr h3) (* (- 1) a2)))) (= (getInt (read h3 a3)) y)) (= (getInt (read h3 a2)) x)))
  (and (and (not (= a3 a2)) (and (<= 0 (+ (- 1) a3)) (<= 0 (+ (- 1) a2)))) (and (and (<= 0 (+ (counteraddr h4) (* (- 1) a2))) (= (+ (getInt (read h4 a3)) y) 0)) (= (getInt (read h4 a2)) x)))
  (and (= (+ (getInt (read h5 a3)) y) 0) (= (+ (getInt (read h5 a2)) x) 0))
)
Loading simple-heap-allocAddr.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap-batch.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading heap-batch-write-read-1-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading heap-batch-write-read-2-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading adt-addrrange-sat.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun ar () AddrRange (AddrRange (nthAddr 1) 3))
  (define-fun a () Addr (nthAddr 4))
  (define-fun h2 () Heap (newHeap (alloc (newBatchHeap (batchAlloc emptyHeap (WrappedInt 1) 3)) (Wrappedsimple (simple (AddrRange (nthAddr 1) 3))))))
  (define-fun h1 () Heap (newBatchHeap (batchAlloc emptyHeap (WrappedInt 1) 3)))
)
Loading adt-addrrange-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap-sat.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun H2 () Heap (newHeap (alloc (newHeap (alloc emptyHeap (WrappedInt 10))) (Wrappedsimple (simple 42)))))
  (define-fun H1 () Heap (newHeap (alloc emptyHeap (WrappedInt 10))))
)
Loading read-interpolation-1.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 34), simplifying (67), interpolating ...

unsat
(
  (and (valid h2 a) (= (getInt (read h2 a)) 42))
)
Loading read-interpolation-1b.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 32), simplifying (65), interpolating ...

unsat
(
  (or (not (valid h2 a)) (= (getInt (read h2 a)) 42))
)
Loading read-interpolation-2.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 108), simplifying (194), interpolating ...

unsat
(
  (and (and (valid h a) (valid h a2)) (not (= a2 a)))
  (and (and (valid h a) (valid h a2)) (and (not (= a2 a)) (<= 0 (+ (- 1) (* (- 1) (getInt (read h a2)))))))
  (and (valid h2 a2) (<= 0 (+ (- 1) (* (- 1) (getInt (read h2 a2))))))
  (and (valid h2 a2) (<= 0 (+ (- 1) (* (- 1) (getInt (read h2 a2))))))
)
Loading read-interpolation-3.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 82), simplifying (153), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (valid h a) (<= 0 (+ (- 1) x)))
  (and (valid h a) (<= 0 (+ (- 1) x)))
  (and (valid h2 a) (<= 0 (+ (- 1) (getInt (read h2 a)))))
)
Loading read-interpolation-4.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 80), simplifying (153), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (valid h a) (<= 0 (+ (- 1) x)))
  (and (valid h a) (<= 0 (+ (- 1) x)))
  (and (valid h2 a) (<= 0 (+ (- 1) (getInt (read h2 a)))))
)
Loading read-interpolation-5.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 140), simplifying (245), interpolating ...

unsat
(
  (<= 0 (+ (- 1) x))
  (and (and (valid h a) (valid h a2)) (and (<= 0 (+ (- 1) x)) (not (= a2 a))))
  (and (and (valid h a) (valid h a2)) (and (not (= a2 a)) (<= 0 (+ (- 1) x))))
  (and (and (valid h2 a) (valid h2 a2)) (and (not (= a2 a)) (<= 0 (+ (- 1) (getInt (read h2 a))))))
  (and (valid h3 a) (<= 0 (+ (- 1) (getInt (read h3 a)))))
)
Loading alloc-interpolation-1.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 83), simplifying (165), interpolating ...

unsat
(
  (valid h (nextaddr h (- 1)))
  (valid h (nextaddr h (- 1)))
  (and (and (not (= a2 nulladdr)) (valid h2 (nextaddr h2 (- 2)))) (and (= a2 (nextaddr h2 (- 1))) (= (getInt (read h2 (nextaddr h2 (- 1)))) 10)))
  (and (and (not (= a2 nulladdr)) (valid h2 (nextaddr h2 (- 2)))) (and (= a2 (nextaddr h2 (- 1))) (= (getInt (read h2 (nextaddr h2 (- 1)))) 10)))
  (and (valid h3 a2) (= (getInt (read h3 a2)) 10))
)
Loading alloc-interpolation-1b.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 95), simplifying (174), interpolating ...

unsat
(
  (valid h a)
  (and (valid h a) (getBool (read h a)))
  (and (valid h2 a) (getBool (read h2 a)))
  false
  false
)
Loading alloc-interpolation-2.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 102), simplifying (188), interpolating ...

unsat
(
  (valid h a)
  (and (valid h a) (= (getInt2 (read h a)) (- 10)))
  (and (valid h2 a) (= (getInt2 (read h2 a)) (- 10)))
  (and (valid h3 a) (= (getInt2 (read h3 a)) (- 10)))
)
Loading alloc-interpolation-3.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 162), simplifying (321), interpolating ...

unsat
(
  (and (and (not (= a2 nulladdr)) (valid h2 (nextaddr h2 (- 1)))) (and (= a2 (nextaddr h2 (- 1))) (= (getInt (read h2 (nextaddr h2 (- 1)))) x)))
  (and (and (not (= a2 nulladdr)) (valid h3 a3)) (and (and (= (+ (addr_ord a2) (* (- 1) (addr_ord a3))) (- 1)) (= (getInt (read h3 a3)) y)) (= (getInt (select (heap_contents h3) (+ (- 1) (addr_ord a3)))) x)))
  (and (and (not (= a2 nulladdr)) (valid h4 a3)) (and (and (= (+ (addr_ord a2) (* (- 1) (addr_ord a3))) (- 1)) (= (+ (getInt (read h4 a3)) y) 0)) (= (getInt (select (heap_contents h4) (+ (- 1) (addr_ord a3)))) x)))
  (and (and (not (= a2 nulladdr)) (valid h5 a3)) (and (and (= (+ (addr_ord a2) (* (- 1) (addr_ord a3))) (- 1)) (= (+ (getInt (select (heap_contents h5) (+ (- 1) (addr_ord a3)))) x) 0)) (= (+ (getInt (read h5 a3)) y) 0)))
)
Loading alloc-interpolation-3b.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () Int 0)
  (define-fun x () Int 0)
  (define-fun a3 () addr (nthaddr 2))
  (define-fun a2 () addr (nthaddr 1))
  (define-fun h5 () heap (newheap (alloc (newheap (alloc emptyheap (AnInt 14))) (AnInt (- 11)))))
  (define-fun h4 () heap (newheap (alloc (newheap (alloc emptyheap (ABool false))) (AnInt (- 11)))))
  (define-fun h3 () heap (newheap (alloc (newheap (alloc emptyheap (ABool false))) (AnInt 11))))
)
Loading alloc-interpolation-3c.smt2 ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 257), simplifying (451), interpolating ...

unsat
(
  (valid h3 a2)
  (and (valid h3 a2) (valid h3 a3))
  (and (and (valid h3 a2) (valid h3 a3)) (not (= a3 a2)))
  (and (and (valid h3 a2) (valid h3 a3)) (and (not (= a3 a2)) (= (getInt (read h3 a2)) x)))
  (and (and (valid h3 a2) (valid h3 a3)) (and (and (not (= a3 a2)) (= (getInt (read h3 a3)) y)) (= (getInt (read h3 a2)) x)))
  (and (and (valid h4 a2) (valid h4 a3)) (and (and (not (= a3 a2)) (= (+ (getInt (read h4 a3)) y) 0)) (= (getInt (read h4 a2)) x)))
  (and (and (valid h5 a2) (valid h5 a3)) (and (= (+ (getInt (read h5 a2)) x) 0) (= (+ (getInt (read h5 a3)) y) 0)))
)
Loading simple-heap-allocAddr.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-heap-batch.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading heap-batch-write-read-1-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading heap-batch-write-read-2-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading adt-addrrange-sat.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun ar () AddrRange (nthAddrRange 1 3))
  (define-fun a () Addr (nthAddr 4))
  (define-fun h2 () Heap (newHeap (alloc (newHeap (alloc (newHeap (alloc (newHeap (alloc emptyHeap (WrappedInt 1))) (WrappedInt 0))) (WrappedInt 0))) (Wrappedsimple (simple (nthAddrRange 1 3))))))
  (define-fun h1 () Heap (newHeap (alloc (newHeap (alloc (newHeap (alloc emptyHeap (WrappedInt 1))) (WrappedInt 0))) (WrappedInt 0))))
)
Loading adt-addrrange-unsat.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading bug-model-1.smt2 ...
sat
(model
  (define-fun A2 () addr (nthaddr 1))
  (define-fun A () addr (nthaddr 2))
  (define-fun H () heap (newBatchheap (batchAlloc emptyheap defObj 2)))
)
Loading incremental-heap.smt2 ...
unsat
unsat
sat
(model
  (define-fun A2 () addr (nthaddr 2))
  (define-fun A () addr (nthaddr 1))
  (define-fun H2 () heap (newheap (alloc (newheap (alloc emptyheap (WrappedInt 10))) (Wrappedsimple (simple 42)))))
  (define-fun H () heap (newheap (alloc emptyheap (WrappedInt 10))))
)
Loading swap-interpolation.smt2 ...
unsat
unsat
((and (and (and (not (= z y)) (not (= z x))) (and (and (<= 0 (+ (- 1) z)) (<= 0 (+ (- 1) y))) (<= 0 (+ (- 1) x)))) (and (and (<= 0 (+ (counteraddr H) (* (- 1) z))) (<= 0 (+ (counteraddr H) (* (- 1) y)))) (and (is-WrappedInt (read H y)) (and (<= 0 (+ (counteraddr H) (* (- 1) y))) (<= 0 (+ (counteraddr H) (* (- 1) x)))))))
(and (and (not (= z x)) (and (and (<= 0 (+ (- 1) z)) (<= 0 (+ (- 1) y))) (<= 0 (+ (- 1) x)))) (and (and (and (<= 0 (+ (counteraddr H1) (* (- 1) y))) (and (<= 0 (+ (counteraddr H1) (* (- 1) x))) (or (and (= (read H1 z) (read H y)) (= (read H1 y) (read H y))) (and (= (read H1 y) (read H y)) (or (not (= y x)) (not (= (read H x) (read H y)))))))) (= (read H x) (read H1 z))) (is-WrappedInt (read H1 y))))
(and (<= 0 (+ (- 1) y)) (and (and (<= 0 (+ (counteraddr H2) (* (- 1) y))) (or (and (and (= (read H2 x) (read H y)) (<= 0 (+ (- 1) x))) (or (not (= y x)) (not (= (read H x) (read H y))))) (and (and (= (read H2 x) (read H2 z)) (= (read H y) (read H2 z))) (<= 0 (+ (- 1) x))))) (and (= (read H x) (read H2 z)) (<= 0 (+ (counteraddr H2) (* (- 1) y))))))
(and (= (read H3 x) (read H y)) (= (read H x) (read H3 y))))
Loading heap-batch-write-read-2-sat.smt2 ...
sat
(model
  (define-fun n () Int 2)
  (define-fun A2 () Addr (nthAddr 3))
  (define-fun A1 () Addr (nthAddr 3))
  (define-fun AR () AddrRange (AddrRange (nthAddr 1) 3))
  (define-fun H2 () Heap (newBatchHeap (batchAlloc emptyHeap (WrappedInt 42) 3)))
  (define-fun H () Heap (newBatchHeap (batchAlloc emptyHeap (WrappedInt 3) 3)))
)
Loading queries.smt2 ...
"query 1"
unsat
"query 2"
unsat
"query 3"
unsat
"query 4"
unsat
"query 5"
unsat
"query 6"
unsat
"query 7"
unsat
"query 8"
unsat
"query 9"
unsat
"query 10"
unsat
"query 11"
unsat
"query 12"
unsat
"query 13"
unsat
"query 14"
unsat
"query 15"
unsat
"query 16"
unsat
"query 17"
unsat
Loading bug-model-1.smt2 ...
sat
(model
  (define-fun A2 () addr (nthaddr 1))
  (define-fun A () addr (nthaddr 2))
  (define-fun H () heap (newheap (alloc (newheap (alloc emptyheap (WrappedInt 0))) (WrappedInt 0))))
)
Loading incremental-heap.smt2 ...
unsat
unsat
sat
(model
  (define-fun A2 () addr (nthaddr 2))
  (define-fun A () addr (nthaddr 1))
  (define-fun H2 () heap (newheap (alloc (newheap (alloc emptyheap (WrappedInt 10))) (Wrappedsimple (simple 42)))))
  (define-fun H () heap (newheap (alloc emptyheap (WrappedInt 10))))
)
Loading swap-interpolation.smt2 ...
unsat
unsat
((and (and (and (valid H x) (valid H y)) (valid H z)) (and (and (or (not (= y x)) (= (read H y) (read H x))) (not (= z y))) (not (= z x))))
(and (and (and (valid H1 x) (valid H1 y)) (valid H1 z)) (and (and (and (and (or (not (= y x)) (= (read H1 z) (read H1 y))) (not (= z x))) (= (heap_size H) (heap_size H1))) (= (readUnsafe H y) (read H1 y))) (= (read H1 z) (readUnsafe H x))))
(and (and (and (valid H2 x) (valid H2 y)) (valid H2 z)) (and (and (and (or (not (= x y)) (= (readUnsafe H y) (read H2 z))) (= (heap_size H) (heap_size H2))) (= (read H2 x) (readUnsafe H y))) (= (readUnsafe H x) (read H2 z))))
(and (and (valid H3 x) (valid H3 y)) (and (and (or (= (select (heap_contents H3) (addr_ord x)) (readUnsafe H y)) (= (read H3 x) (readUnsafe H y))) (= (heap_size H) (heap_size H3))) (= (read H3 y) (readUnsafe H x)))))
Loading heap-batch-write-read-2-sat.smt2 ...
sat
(model
  (define-fun n () Int 2)
  (define-fun A2 () Addr (nthAddr 3))
  (define-fun A1 () Addr (nthAddr 1))
  (define-fun AR () AddrRange (nthAddrRange 1 3))
  (define-fun H2 () Heap (newHeap (alloc (newHeap (alloc (newHeap (alloc emptyHeap (WrappedInt 42))) (WrappedInt 0))) (WrappedInt 42))))
  (define-fun H () Heap (newHeap (alloc (newHeap (alloc (newHeap (alloc emptyHeap (WrappedInt 0))) (WrappedInt 0))) (WrappedInt 0))))
)
Loading queries.smt2 ...
"query 1"
unsat
"query 2"
unsat
"query 3"
unsat
"query 4"
unsat
"query 5"
unsat
"query 6"
unsat
"query 7"
unsat
"query 8"
unsat
"query 9"
unsat
"query 10"
unsat
"query 11"
unsat
"query 12"
unsat
"query 13"
unsat
"query 14"
unsat
"query 15"
unsat
"query 16"
unsat
"query 17"
unsat
