Loading functions2b.pri ...
Preprocessing ...
Proving ...

VALID
Loading tarskiGeometry2.pri ...
Preprocessing ...
Proving ...

VALID
Loading group0.pri ...
Preprocessing ...
Proving ...

VALID
Loading counterExampleBug.pri ...
Preprocessing ...
Constructing countermodel ...

INVALID

Countermodel:
z = 2147483647 & y = -2147483662 & x = -2147483660 & addSigned(32, -2147483662, 13) = 2147483647
Loading omega_problem__031.smt.pri ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 1)

VALID
Loading ricart-agrawala7.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

unknown
(model
  (define-fun time () Int 5)
  (define-fun q () Int 2)
  (define-fun p () Int 1)
  (define-fun s3 ((x!0 Int)) Bool (ite (= x!0 1) false true))
  (define-fun ro ((x!0 Int) (x!1 Int)) Bool (ite (and (= x!0 1) (= x!1 2)) false true))
  (define-fun rd ((x!0 Int) (x!1 Int)) Bool (ite (and (= x!0 2) (= x!1 1)) false true))
  (define-fun s4 ((x!0 Int)) Bool (ite (= x!0 1) true true))
  (define-fun sn ((x!0 Int)) Int (ite (= x!0 1) 4 (ite (= x!0 2) 3 0)))
  (define-fun s6 ((x!0 Int)) Bool (ite (= x!0 1) false (ite (= x!0 2) true true)))
  (define-fun rcs2 ((x!0 Int)) Bool (ite (= x!0 2) true true))
  (define-fun x ((x!0 Int) (x!1 Int)) Bool (ite (and (= x!0 1) (= x!1 2)) false (ite (and (= x!0 2) (= x!1 1)) false true)))
  (define-fun s5 ((x!0 Int)) Bool (ite (= x!0 1) false true))
)
Loading proofBug.pri ...
Preprocessing ...
Constructing countermodel ...

INVALID
Loading multiplication3.pri ...
Preprocessing ...
Proving ...

VALID
Loading vstte-problem-2-vc.pri ...
Preprocessing ...
Proving ...

VALID
Loading soldiers.pri ...
Preprocessing ...
Proving ...

VALID

Under the most-general constraint:
10 >= MinNum

Concrete witness:
MinNum = 10
Loading GEO212+3-complete.p ...
Preprocessing ...
Warning: ignoring some quantifiers
Constructing countermodel ...

% SZS status GaveUp for GEO212+3-complete.p

Possible countermodel:
not_orthogonal_lines($i!10, $i!12) & orthogonal_lines($i!6, $i!8) & !not_orthogonal_lines($i!12, $i!14) & !convergent_lines($i!10, $i!14)
Loading diamonds.16.3.i.a.u.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...
Found proof (size 508063)

unsat
Loading abbrev-interpolation.smt2 ...
unsat
((and (and (and (and (and (and (= |main::A3@3| 1) (= |main::A1@3| 0)) (= |main::S0@3| 0)) (= |main::B1@3| 1)) (= |main::S@3| 0)) (= |main::A2@3| (- 2))) (and (<= 0 (+ 4 (+ (* (- 3) |main::E@3|) (* (- 1) |main::E0@3|)))) (<= 0 (+ (* 3 |main::E@3|) |main::E0@3|))))
(and (and (and (and (= |main::A3@3| 1) (= |main::S0@4| 0)) (= |main::B1@3| 1)) (= |main::A2@3| (- 2))) (and (forall ((var0 Int)) (<= 0 (+ 6 (+ (* (- 1) (* |main::A1@3| var0)) (+ (* (- 1) |main::S@4|) (+ (* (- 2) |main::E@4|) (* (- 1) |main::E0@4|))))))) (forall ((var0 Int)) (<= 0 (+ (* |main::A1@3| var0) (+ |main::S@4| (+ (* 2 |main::E@4|) |main::E0@4|))))))))
Loading adt-size3b.pri ...
Preprocessing ...
Proving ...

VALID
Loading adt-large.pri ...
Preprocessing ...
Constructing countermodel ...

INVALID

Countermodel:
y = 643 & x = Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Succ(Leaf(643)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
Loading bv-interpolation-7.pri ...
Preprocessing ...
Constructing countermodel ...
Found proof (size 173), simplifying (255), interpolating ...

VALID

Interpolants:
Warning: cannot map formula ALL (! (_0 + -7 != 0 & _0 + -6 != 0 & _0 + -5 != 0 & _0 + -4 != 0 & _0 + -3 != 0 & _0 + -2 != 0 & _0 + -1 != 0 & _0 != 0 & -1*_0 + 7 >= 0 & _0 >= 0)) to interpolation partition (constants z)
y.\as[int] + x.\as[int] >= 12 | -1*y.\as[int] + -1*x.\as[int] >= -2 | (z = 7.\as[bv[3]] & x = 2.\as[bv[3]]) | (z = 6.\as[bv[3]] & x = 0.\as[bv[3]]) | (z = 5.\as[bv[3]] & x = 6.\as[bv[3]]) | (z = 4.\as[bv[3]] & x = 4.\as[bv[3]]) | (z = 3.\as[bv[3]] & x = 2.\as[bv[3]]) | (z = 2.\as[bv[3]] & x = 0.\as[bv[3]]) | (z = 1.\as[bv[3]] & x = 6.\as[bv[3]]) | (z = 0.\as[bv[3]] & x = 4.\as[bv[3]]) | (-1*y.\as[int] + -1*x.\as[int] >= -10 & y.\as[int] + x.\as[int] >= 8) | (-1*y.\as[int] + -1*x.\as[int] >= -6 & y.\as[int] + x.\as[int] >= 4)
Warning: cannot map formula ALL (! (_0 + -7 != 0 & _0 + -6 != 0 & _0 + -5 != 0 & _0 + -4 != 0 & _0 + -3 != 0 & _0 + -2 != 0 & _0 + -1 != 0 & _0 != 0 & -1*_0 + 7 >= 0 & _0 >= 0)) to interpolation partition (constants z)
(z = 7.\as[bv[3]] & x = 2.\as[bv[3]] & (y = 5.\as[bv[3]] | y = 1.\as[bv[3]])) | (z = 6.\as[bv[3]] & x = 0.\as[bv[3]] & (y = 3.\as[bv[3]] | y.\as[int] >= 7)) | (z = 5.\as[bv[3]] & x = 6.\as[bv[3]] & (y = 5.\as[bv[3]] | y = 1.\as[bv[3]])) | (z = 4.\as[bv[3]] & x = 4.\as[bv[3]] & (y = 3.\as[bv[3]] | y.\as[int] >= 7)) | (z = 3.\as[bv[3]] & x = 2.\as[bv[3]] & (y = 5.\as[bv[3]] | y = 1.\as[bv[3]])) | (z = 2.\as[bv[3]] & x = 0.\as[bv[3]] & (y = 3.\as[bv[3]] | y.\as[int] >= 7)) | (z = 1.\as[bv[3]] & x = 6.\as[bv[3]] & (y = 5.\as[bv[3]] | y = 1.\as[bv[3]])) | (z = 0.\as[bv[3]] & x = 4.\as[bv[3]] & (y = 3.\as[bv[3]] | y.\as[int] >= 7))
(2 + 2*y.\as[int] + 2*x.\as[int]).\as[bv[3]] != 0.\as[bv[3]]
Loading boolean-triggers.smt2 ...
Preprocessing ...
Warning: ignoring some quantifiers
Constructing countermodel ...

unsat
Loading 10-40.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x9 () Int (- 1))
  (define-fun x8 () Int (- 1))
  (define-fun x7 () Int 1)
  (define-fun x6 () Int (- 3))
  (define-fun x5 () Int (- 2))
  (define-fun x4 () Int (- 2))
  (define-fun x3 () Int (- 3))
  (define-fun x2 () Int 2)
  (define-fun x1 () Int 3)
  (define-fun x0 () Int (- 4))
)
Loading simplify26.pri ...
Preprocessing ...
Constructing countermodel ...

INVALID

Countermodel:
w = -46667286 & v = -355028446 & u = -493485450 & t = -1508 & z = -522129610 & y = -1767 & x = -768243216
Loading multiplication.pri ...
Preprocessing ...
Proving ...

VALID
Loading conjunctElimBug.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing satisfying assignment for the existential constants ...

sat
Loading sort-unsoundness.smt2 ...
unknown
Global timeout, stopping solver
Loading SYN455+1.p ...
Preprocessing ...
Warning: ignoring some quantifiers
Constructing countermodel ...

% SZS status GaveUp for SYN455+1.p
Loading dnf-constraint.pri ...
Preprocessing ...
Eliminating quantifiers ...

VALID

Equivalent constraint:
(x1 - x0 = 1 & 2 >= x0 & x0 >= 1) | (x1 = 0 & x0 = 0)

Concrete witness:
x1 = 3 & x0 = 2
Loading dnf-constraint.pri ...
Preprocessing ...
Eliminating quantifiers ...

VALID

Equivalent constraint:
(x1 - x0 != 1 | x0 = -1 | x0 >= 1) & (x1 - x0 != 1 | 2 >= x0) & (x1 != 0 | x0 = 0) & (x1 - x0 = 1 | x1 = 0)

Concrete witness:
x1 = 3 & x0 = 2
