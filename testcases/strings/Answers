Loading simple-cycle.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-cycle2.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading simple-cycle3.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading concat-1.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun z () String "\u{0}")
  (define-fun y () String "")
  (define-fun x () String "\u{0}")
)
Loading concat-2.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun z () String "\u{0}\u{0}")
  (define-fun x () String "\u{0}")
)
Loading transducer1.smt2 ...
Warning: assuming that recursive function succ is partial
Warning: assuming that recursive function succH is partial
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () String "100")
  (define-fun x () String "011")
  (define-fun succ ((x!0 String) (x!1 String)) Bool (ite (and (= x!0 "011") (= x!1 "100")) true true))
  (define-fun succH ((x!0 String) (x!1 String)) Bool (ite (and (= x!0 "") (= x!1 "")) true (ite (and (= x!0 "11") (= x!1 "00")) true (ite (and (= x!0 "1") (= x!1 "0")) true true))))
)
Loading transducer1b.smt2 ...
Warning: assuming that recursive function succ is partial
Warning: assuming that recursive function succH is partial
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () String "100")
  (define-fun x () String "011")
  (define-fun succ ((x!0 String) (x!1 String)) Bool (ite (and (= x!0 "011") (= x!1 "100")) true true))
  (define-fun succH ((x!0 String) (x!1 String)) Bool (ite (and (= x!0 "") (= x!1 "")) true (ite (and (= x!0 "11") (= x!1 "00")) true (ite (and (= x!0 "1") (= x!1 "0")) true true))))
)
Loading adt.smt2 ...
Warning: assuming that recursive function cat is partial
Warning: assuming that recursive function nonEmpty is partial
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun t () Tree (node leaf "Hello World" leaf))
  (define-fun c () String "Hello World")
  (define-fun b () String "")
  (define-fun a () String "")
  (define-fun cat ((x!0 Tree)) String (ite (= x!0 (node leaf "Hello World" leaf)) "Hello World" (ite (= x!0 leaf) "" "")))
  (define-fun nonEmpty ((x!0 Tree)) Bool (ite (= x!0 (node leaf "Hello World" leaf)) true (ite (= x!0 leaf) true true)))
)
Loading escape.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () String "Hell")
  (define-fun x () String "\u{5c}x48\u{5c}145\u{5c}x6cl")
)
Loading escape2.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () String "\u{5c}t")
  (define-fun x () String "\u{5c}f")
)
Loading escape3.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading escape4.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () String "\u{5c}.")
)
Loading escape5.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun T_162 () String "")
  (define-fun T_163 () String "\u{5c}""></scr")
)
Loading head.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () String "B")
)
Loading regex.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun R () RegLan RegLan!4)
)
Loading chars.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun ch () Int 90)
  (define-fun c () String "string")
  (define-fun b () String "s")
  (define-fun a () String "s")
  (define-fun z () String "")
  (define-fun x () String "Z")
)
Loading chars2.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () String "$")
)
Loading single-quoted.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading single-quoted2.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading completeness.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () String "\u{0}")
  (define-fun x () String "aaaaa")
  (define-fun f ((x!0 String)) Int (ite (= x!0 "aaaaa") 1 (ite (= x!0 "\u{0}") 2 0)))
)
Loading str-at.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun n () Int 0)
  (define-fun w () String "a")
)
Loading str-substr.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun n () Int 0)
  (define-fun w () String "abc")
)
Loading str-substr2.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun w () String "\u{0}\u{0}\u{ffff}\u{0}\u{ffff}\u{ffff}\u{0}\u{0}abc")
)
Loading str-prefixof.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun v () String "\u{ffff}\u{ffff}\u{0}\u{0}")
  (define-fun w () String "\u{ffff}\u{ffff}\u{0}\u{0}")
)
Loading str-suffixof.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun v () String "a\u{ffff}\u{0}b")
  (define-fun w () String "\u{ffff}\u{ffff}a\u{ffff}\u{0}b")
)
Loading str-to-int.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun w () String "12345")
)
Loading str-to-int2.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun w () String "31990")
)
Loading str-to-int3.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading str-to-int4.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun b () Int 803)
  (define-fun a () Int 137)
  (define-fun n () Int 110011)
  (define-fun w () String "110011")
)
Loading str-to-int5.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
)
Loading str-indexof.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun v () String "\u{0}")
  (define-fun w () String "\u{1}\u{0}")
)
Loading str-indexof2.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading str-indexof3.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading str-indexof4.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading str-indexof5.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun X () String "")
)
Loading str-contains.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun w () String "cba")
)
Loading str-replace.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun v () String "bbAacc")
  (define-fun w () String "bbaacc")
)
Loading str-replace2.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading str-in-re.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun w () String "bb")
)
Loading str-in-re-2.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading str-in-re-3.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading str-from-int.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun n () Int 499)
  (define-fun w () String "499")
)
Loading str-from-int-2.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading escape.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat
Loading escape2.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () String "\u{9}")
  (define-fun x () String "\u{c}")
)
Loading escape3.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () String "\u{5c}.")
)
Loading escape4.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () String "\u{5c}.")
)
Loading escape5.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun T_162 () String "")
  (define-fun T_163 () String "\u{5c}""></scr")
)
Loading concat-3.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun var_0xINPUT_13337 () String "")
  (define-fun T_a () String "&utmn=1721822349&utmcs=UTF-8&utmsr=1680x976&utmsc=24-bit&utmul=en-us&utmje=0&utmfl=-&utmdt=Ask%20A%20Word&utmhn=www.askaword.com&utmhid=198308946&utmr=0&utmp=?d=gg")
  (define-fun T_9 () String "?d=gg")
  (define-fun T_7 () String "http://www.google-analytics.com/__utm.gif?utmwv=1.3&utmn=1721822349&utmcs=UTF-8&utmsr=1680x976&utmsc=24-bit&utmul=en-us&utmje=0&utmfl=-&utmdt=Ask%20A%20Word&utmhn=www.askaword.com&utmhid=198308946&utmr=0&utmp=?d=gg&utmac=UA-167675-3&utmcc=__utma%3D169413169.446562632.1266909490.1266909490.1266909490.1%3B%2B__utmz%3D169413169.1266909490.1.1.utmccn%3D(direct)%7Cutmcsr%3D(direct)%7Cutmcmd%3D(none)%3B%2B")
  (define-fun T_6 () String "http://www.google-analytics.com/__utm.gif?utmwv=1.3&utmn=1721822349&utmcs=UTF-8&utmsr=1680x976&utmsc=24-bit&utmul=en-us&utmje=0&utmfl=-&utmdt=Ask%20A%20Word&utmhn=www.askaword.com&utmhid=198308946&utmr=0&utmp=?d=gg&utmac=UA-167675-3&utmcc=")
  (define-fun T_5 () String "http://www.google-analytics.com/__utm.gif?utmwv=1.3&utmn=1721822349&utmcs=UTF-8&utmsr=1680x976&utmsc=24-bit&utmul=en-us&utmje=0&utmfl=-&utmdt=Ask%20A%20Word&utmhn=www.askaword.com&utmhid=198308946&utmr=0&utmp=?d=gg&utmac=UA-167675-3")
  (define-fun T_4 () String "http://www.google-analytics.com/__utm.gif?utmwv=1.3&utmn=1721822349&utmcs=UTF-8&utmsr=1680x976&utmsc=24-bit&utmul=en-us&utmje=0&utmfl=-&utmdt=Ask%20A%20Word&utmhn=www.askaword.com&utmhid=198308946&utmr=0&utmp=?d=gg&utmac=")
  (define-fun T_3 () String "http://www.google-analytics.com/__utm.gif?utmwv=1.3&utmn=1721822349&utmcs=UTF-8&utmsr=1680x976&utmsc=24-bit&utmul=en-us&utmje=0&utmfl=-&utmdt=Ask%20A%20Word&utmhn=www.askaword.com&utmhid=198308946&utmr=0&utmp=?d=gg")
  (define-fun T_2 () String "&utmn=1721822349&utmcs=UTF-8&utmsr=1680x976&utmsc=24-bit&utmul=en-us&utmje=0&utmfl=-&utmdt=Ask%20A%20Word&utmhn=www.askaword.com&utmhid=198308946&utmr=0&utmp=?d=gg")
  (define-fun T_1 () String "?d=gg")
  (define-fun T2_9 () String "?d=gg")
  (define-fun T2_20 () String "?d=gg")
  (define-fun T1_9 () String "")
  (define-fun T1_20 () String "")
)
