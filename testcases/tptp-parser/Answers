Loading ARI120=1.p ...
Preprocessing ...
Proving ...

% SZS status Theorem for ARI120=1.p
Loading ARI496=1.p ...
Preprocessing ...
Constructing countermodel ...

% SZS status Theorem for ARI496=1.p
Loading ARI595=1.p ...
Preprocessing ...
Proving ...

% SZS status Theorem for ARI595=1.p
Loading ARI616=1.p ...
Preprocessing ...
Proving ...

% SZS status Theorem for ARI616=1.p
Loading ARI620=1.p ...
Preprocessing ...
Proving ...

% SZS status Theorem for ARI620=1.p
Loading ARI526=1.p ...
Warning: Problem contains reals, using incomplete axiomatisation
Warning: Problem contains rationals, using incomplete axiomatisation
Preprocessing ...
Constructing countermodel ...

% SZS status Theorem for ARI526=1.p
Loading ARI522=1.p ...
Warning: Problem contains reals, using incomplete axiomatisation
Warning: Problem contains rationals, using incomplete axiomatisation
Preprocessing ...
Constructing countermodel ...

% SZS status Theorem for ARI522=1.p
Loading GEG021=1.p ...
Preprocessing ...
Proving ...

% SZS status Theorem for GEG021=1.p
Loading PUZ133=2.p ...
Preprocessing ...
Proving ...

% SZS status Theorem for PUZ133=2.p
Loading SYN050-1.p ...
Preprocessing ...
Proving ...

% SZS status Unsatisfiable for SYN050-1.p
Loading SYO561_1.p ...
Preprocessing ...
Constructing countermodel ...

% SZS status Theorem for SYO561_1.p
Loading SYO563+1.p ...
Preprocessing ...
Constructing countermodel ...

% SZS status Theorem for SYO563+1.p
Loading SYO563+2.p ...
Preprocessing ...
Constructing countermodel ...

% SZS status Theorem for SYO563+2.p
Loading let-tests.p ...
Preprocessing ...
Constructing countermodel ...

% SZS status Theorem for let-tests.p
Loading quotes.p ...
Preprocessing ...
Constructing countermodel ...

% SZS status Satisfiable for quotes.p

Countermodel:
green:\\'Color' = Color!4 & red:Color = Color!2
Loading multiple-conjectures.p ...
Preprocessing ...
Constructing countermodel ...

% SZS status Theorem for multiple-conjectures.p
Loading finite-domains-2.p ...
Preprocessing ...
Proving ...

% SZS status Theorem for finite-domains-2.p
Loading finite-domains-3.p ...
Preprocessing ...
Proving ...

% SZS status Theorem for finite-domains-3.p
Loading PUZ001+1.p ...
Preprocessing ...
Proving ...

% SZS status Theorem for PUZ001+1.p
Loading PHI009+1.p ...
Preprocessing ...
Constructing countermodel ...

% SZS status Theorem for PHI009+1.p
Loading unsat-core.p ...
Preprocessing ...
Warning: ignoring some quantifiers
Constructing countermodel ...
Found proof (size 289)

% SZS status Theorem for unsat-core.p

Unsatisfiable core:
{DIFF-row1-row2, DIFF-row1-row3, DIFF-row2-row3, DIFF-tempty-tcons, EQ-someRawTable, EQ-tcons, FunctionAxioms, attachColToFrontRaw-INV, attachColToFrontRaw0, dropFirstColRaw0, dropFirstColRaw1, isSomeRawTable-true-INV, isSomeRawTable1, projectEmptyCol0, projectEmptyCol1, projectFirstRaw0, projectFirstRaw1, rawDifference-INV, rawDifference2, rawDifference3, rawDifference4, rowIn-true-INV, rowIn0, rowIn1, singleRowSelect-INV, test-4}
Loading unsat-core.p ...
Preprocessing ...
Warning: ignoring some quantifiers
Constructing countermodel ...
Found proof (size 289)

% SZS status Theorem for unsat-core.p

% SZS output start Proof for theBenchmark
Assumptions after simplification:
---------------------------------

  (DIFF-row1-row2)
   ~ (vrow1 = vrow2) & $i(vrow1) & $i(vrow2)

  (DIFF-row1-row3)
   ~ (vrow3 = vrow1) & $i(vrow3) & $i(vrow1)

  (DIFF-row2-row3)
   ~ (vrow3 = vrow2) & $i(vrow3) & $i(vrow2)

  (DIFF-tempty-tcons)
  $i(vtempty) &  ! [v0: $i] :  ! [v1: $i] : ( ~ (vtcons(v0, v1) = vtempty) |  ~
    $i(v1) |  ~ $i(v0))

  (EQ-someRawTable)
   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vsomeRawTable(v1) =
      v2) |  ~ (vsomeRawTable(v0) = v2) |  ~ $i(v1) |  ~ $i(v0))

  (EQ-tcons)
   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] :  ! [v4: $i] : ( ~
    (vtcons(v1, v3) = v4) |  ~ (vtcons(v0, v2) = v4) |  ~ $i(v3) |  ~ $i(v2) | 
    ~ $i(v1) |  ~ $i(v0) | (v3 = v2 & v1 = v0))

  (attachColToFrontRaw-INV)
  $i(vnoRawTable) & $i(vtempty) & $i(vrempty) &  ? [v0: $i] :
  (vsomeRawTable(vtempty) = v0 & $i(v0) &  ! [v1: $i] :  ! [v2: $i] :  ! [v3:
      $i] : ( ~ (vattachColToFrontRaw(v1, v2) = v3) |  ~ $i(v3) |  ~ $i(v2) |  ~
      $i(v1) |  ? [v4: $i] :  ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] :  ? [v8:
        $i] :  ? [v9: $i] :  ? [v10: $i] :  ? [v11: $i] :  ? [v12: $i] :
      (vattachColToFrontRaw(v4, v8) = v5 & vgetSomeRawTable(v5) = v11 &
        visSomeRawTable(v5) = 0 & vsomeRawTable(v12) = v3 & vtcons(v10, v11) =
        v12 & vtcons(v9, v4) = v1 & vtcons(v6, v8) = v2 & vrcons(v7, v6) = v10 &
        vrcons(v7, vrempty) = v9 & $i(v12) & $i(v11) & $i(v10) & $i(v9) & $i(v8)
        & $i(v7) & $i(v6) & $i(v5) & $i(v4)) |  ? [v4: $i] :  ? [v5: $i] :  ?
      [v6: $i] :  ? [v7: $i] :  ? [v8: $i] :  ? [v9: int] :  ? [v10: $i] : (v3 =
        vnoRawTable &  ~ (v9 = 0) & vattachColToFrontRaw(v4, v8) = v5 &
        visSomeRawTable(v5) = v9 & vtcons(v10, v4) = v1 & vtcons(v6, v8) = v2 &
        vrcons(v7, vrempty) = v10 & $i(v10) & $i(v8) & $i(v7) & $i(v6) & $i(v5)
        & $i(v4)) | (v3 = v0 & v2 = vtempty & v1 = vtempty) | (v3 = vnoRawTable
        & ( ~ (v2 = vtempty) |  ~ (v1 = vtempty)) & ( ! [v4: $i] :  ! [v5: $i] :
           ! [v6: $i] : ( ~ (vtcons(v6, v5) = v1) |  ~ (vrcons(v4, vrempty) =
              v6) |  ~ $i(v5) |  ~ $i(v4)) |  ! [v4: $i] :  ! [v5: $i] : ( ~
            (vtcons(v4, v5) = v2) |  ~ $i(v5) |  ~ $i(v4))))))

  (attachColToFrontRaw0)
  $i(vtempty) &  ? [v0: $i] : (vattachColToFrontRaw(vtempty, vtempty) = v0 &
    vsomeRawTable(vtempty) = v0 & $i(v0))

  (dropFirstColRaw0)
  vdropFirstColRaw(vtempty) = vtempty & $i(vtempty)

  (dropFirstColRaw1)
  $i(vrempty) &  ! [v0: $i] :  ! [v1: $i] : ( ~ (vtcons(vrempty, v0) = v1) |  ~
    $i(v0) |  ? [v2: $i] :  ? [v3: $i] : (vdropFirstColRaw(v1) = v2 &
      vdropFirstColRaw(v0) = v3 & vtcons(vrempty, v3) = v2 & $i(v3) & $i(v2)))

  (isSomeRawTable-true-INV)
   ! [v0: $i] : ( ~ (visSomeRawTable(v0) = 0) |  ~ $i(v0) |  ? [v1: $i] :
    (vsomeRawTable(v1) = v0 & $i(v1)))

  (isSomeRawTable1)
   ! [v0: $i] :  ! [v1: $i] : ( ~ (vsomeRawTable(v0) = v1) |  ~ $i(v0) |
    visSomeRawTable(v1) = 0)

  (projectEmptyCol0)
  vprojectEmptyCol(vtempty) = vtempty & $i(vtempty)

  (projectEmptyCol1)
  $i(vrempty) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : ( ~ (vtcons(v0, v1) =
      v2) |  ~ $i(v1) |  ~ $i(v0) |  ? [v3: $i] :  ? [v4: $i] :
    (vprojectEmptyCol(v2) = v3 & vprojectEmptyCol(v1) = v4 & vtcons(vrempty, v4)
      = v3 & $i(v4) & $i(v3)))

  (projectFirstRaw0)
  vprojectFirstRaw(vtempty) = vtempty & $i(vtempty)

  (projectFirstRaw1)
  $i(vrempty) &  ! [v0: $i] :  ! [v1: $i] : ( ~ (vtcons(vrempty, v0) = v1) |  ~
    $i(v0) |  ? [v2: $i] :  ? [v3: $i] : (vprojectFirstRaw(v1) = v2 &
      vprojectFirstRaw(v0) = v3 & vtcons(vrempty, v3) = v2 & $i(v3) & $i(v2)))

  (rawDifference-INV)
  $i(vtempty) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : ( ~
    (vrawDifference(v0, v1) = v2) |  ~ $i(v2) |  ~ $i(v1) |  ~ $i(v0) |  ? [v3:
      $i] :  ? [v4: $i] :  ? [v5: $i] :  ? [v6: int] : ( ~ (v6 = 0) &  ~ (v4 =
        vtempty) & vrawDifference(v4, v1) = v3 & vrowIn(v5, v1) = v6 &
      vtcons(v5, v4) = v0 & vtcons(v5, v3) = v2 & $i(v5) & $i(v4) & $i(v3)) |  ?
    [v3: $i] :  ? [v4: int] : (v2 = v0 &  ~ (v4 = 0) & vrowIn(v3, v1) = v4 &
      vtcons(v3, vtempty) = v0 & $i(v3)) |  ? [v3: $i] :  ? [v4: $i] : ( ~ (v3 =
        vtempty) & vrawDifference(v3, v1) = v2 & vrowIn(v4, v1) = 0 & vtcons(v4,
        v3) = v0 & $i(v4) & $i(v3)) |  ? [v3: $i] : (v2 = vtempty & vrowIn(v3,
        v1) = 0 & vtcons(v3, vtempty) = v0 & $i(v3)) | (v2 = v0 & v1 = vtempty)
    | (v2 = vtempty & v0 = vtempty))

  (rawDifference2)
  $i(vtempty) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v3 = v2
    |  ~ (vrawDifference(v2, v1) = v3) |  ~ (vtcons(v0, vtempty) = v2) |  ~
    $i(v1) |  ~ $i(v0) | vrowIn(v0, v1) = 0)

  (rawDifference3)
  $i(vtempty) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v3 =
    vtempty |  ~ (vrawDifference(v2, v1) = v3) |  ~ (vtcons(v0, vtempty) = v2) |
     ~ $i(v1) |  ~ $i(v0) |  ? [v4: int] : ( ~ (v4 = 0) & vrowIn(v0, v1) = v4))

  (rawDifference4)
  $i(vtempty) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] :  ! [v4:
    $i] :  ! [v5: $i] :  ! [v6: $i] : (v6 = v5 | v1 = vtempty |  ~
    (vrawDifference(v4, v2) = v5) |  ~ (vtcons(v3, v1) = v4) |  ~ (vtcons(v3,
        v0) = v6) |  ~ $i(v3) |  ~ $i(v2) |  ~ $i(v1) |  ~ $i(v0) |  ? [v7: $i]
    :  ? [v8: int] : ((v8 = 0 & vrowIn(v3, v2) = 0) | ( ~ (v7 = v0) &
        vrawDifference(v1, v2) = v7 & $i(v7))))

  (rowIn-true-INV)
   ! [v0: $i] :  ! [v1: $i] : ( ~ (vrowIn(v0, v1) = 0) |  ~ $i(v1) |  ~ $i(v0) |
     ? [v2: $i] :  ? [v3: $i] :  ? [v4: int] : (vtcons(v2, v3) = v1 & $i(v3) &
      $i(v2) & (v2 = v0 | (v4 = 0 & vrowIn(v0, v3) = 0))))

  (rowIn0)
  $i(vtempty) &  ! [v0: $i] : ( ~ (vrowIn(v0, vtempty) = 0) |  ~ $i(v0))

  (rowIn1)
   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] :  ! [v4: int] : (v4 = 0
    |  ~ (vrowIn(v0, v3) = v4) |  ~ (vtcons(v1, v2) = v3) |  ~ $i(v2) |  ~
    $i(v1) |  ~ $i(v0) | ( ~ (v1 = v0) &  ? [v5: int] : ( ~ (v5 = 0) &
        vrowIn(v0, v2) = v5))) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  !
  [v3: $i] : (v1 = v0 |  ~ (vrowIn(v0, v3) = 0) |  ~ (vtcons(v1, v2) = v3) |  ~
    $i(v2) |  ~ $i(v1) |  ~ $i(v0) | vrowIn(v0, v2) = 0)

  (singleRowSelect-INV)
  $i(visFalse) & $i(verror) & $i(visTrue) & $i(vrempty) & $i(vaempty) &  ! [v0:
    $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : ( ~ (vsingleRowSelect(v0,
        v1, v2) = v3) |  ~ $i(v3) |  ~ $i(v2) |  ~ $i(v1) |  ~ $i(v0) |  ? [v4:
      $i] :  ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] :  ? [v8: $i] :  ? [v9: int]
    : (v3 = visFalse &  ~ (v9 = 0) & vle(v8, v7) = v9 & vVSmaller(v4, v7) = v1 &
      vrcons(v8, v6) = v2 & vacons(v4, v5) = v0 & $i(v8) & $i(v7) & $i(v6) &
      $i(v5) & $i(v4) & ( ~ (v6 = vrempty) |  ~ (v5 = vaempty))) |  ? [v4: $i] :
     ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] :  ? [v8: $i] :  ? [v9: int] : (v3 =
      visFalse &  ~ (v9 = 0) & vge(v8, v7) = v9 & vVGreater(v4, v7) = v1 &
      vrcons(v8, v6) = v2 & vacons(v4, v5) = v0 & $i(v8) & $i(v7) & $i(v6) &
      $i(v5) & $i(v4) & ( ~ (v6 = vrempty) |  ~ (v5 = vaempty))) |  ? [v4: $i] :
     ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] :  ? [v8: $i] :  ? [v9: $i] : ( ~
      (v5 = v4) & vsingleRowSelect(v6, v1, v7) = v3 & vVSmaller(v5, v8) = v1 &
      vrcons(v9, v7) = v2 & vacons(v4, v6) = v0 & $i(v9) & $i(v8) & $i(v7) &
      $i(v6) & $i(v5) & $i(v4) & ( ~ (v7 = vrempty) |  ~ (v6 = vaempty))) |  ?
    [v4: $i] :  ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] :  ? [v8: $i] :  ? [v9:
      $i] : ( ~ (v5 = v4) & vsingleRowSelect(v6, v1, v7) = v3 & vVGreater(v5,
        v8) = v1 & vrcons(v9, v7) = v2 & vacons(v4, v6) = v0 & $i(v9) & $i(v8) &
      $i(v7) & $i(v6) & $i(v5) & $i(v4) & ( ~ (v7 = vrempty) |  ~ (v6 =
          vaempty))) |  ? [v4: $i] :  ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] : 
    ? [v8: $i] :  ? [v9: $i] : ( ~ (v5 = v4) & vsingleRowSelect(v6, v1, v7) = v3
      & vVEquals(v5, v8) = v1 & vrcons(v9, v7) = v2 & vacons(v4, v6) = v0 &
      $i(v9) & $i(v8) & $i(v7) & $i(v6) & $i(v5) & $i(v4) & ( ~ (v7 = vrempty) |
         ~ (v6 = vaempty))) |  ? [v4: $i] :  ? [v5: $i] :  ? [v6: $i] :  ? [v7:
      $i] :  ? [v8: $i] : (v3 = visFalse &  ~ (v8 = v7) & vVEquals(v4, v7) = v1
      & vrcons(v8, v6) = v2 & vacons(v4, v5) = v0 & $i(v8) & $i(v7) & $i(v6) &
      $i(v5) & $i(v4) & ( ~ (v6 = vrempty) |  ~ (v5 = vaempty))) |  ? [v4: $i] :
     ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] :  ? [v8: $i] : (v3 = visTrue &
      vle(v8, v7) = 0 & vVSmaller(v4, v7) = v1 & vrcons(v8, v6) = v2 &
      vacons(v4, v5) = v0 & $i(v8) & $i(v7) & $i(v6) & $i(v5) & $i(v4) & ( ~ (v6
          = vrempty) |  ~ (v5 = vaempty))) |  ? [v4: $i] :  ? [v5: $i] :  ? [v6:
      $i] :  ? [v7: $i] :  ? [v8: $i] : (v3 = visTrue & vge(v8, v7) = 0 &
      vVGreater(v4, v7) = v1 & vrcons(v8, v6) = v2 & vacons(v4, v5) = v0 &
      $i(v8) & $i(v7) & $i(v6) & $i(v5) & $i(v4) & ( ~ (v6 = vrempty) |  ~ (v5 =
          vaempty))) |  ? [v4: $i] :  ? [v5: $i] :  ? [v6: $i] :  ? [v7: int] :
    (v3 = visFalse &  ~ (v7 = 0) & vle(v5, v6) = v7 & vVSmaller(v4, v6) = v1 &
      vrcons(v5, vrempty) = v2 & vacons(v4, vaempty) = v0 & $i(v6) & $i(v5) &
      $i(v4)) |  ? [v4: $i] :  ? [v5: $i] :  ? [v6: $i] :  ? [v7: int] : (v3 =
      visFalse &  ~ (v7 = 0) & vge(v5, v6) = v7 & vVGreater(v4, v6) = v1 &
      vrcons(v5, vrempty) = v2 & vacons(v4, vaempty) = v0 & $i(v6) & $i(v5) &
      $i(v4)) |  ? [v4: $i] :  ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] : (v3 =
      verror &  ~ (v5 = v4) & vVSmaller(v5, v6) = v1 & vrcons(v7, vrempty) = v2
      & vacons(v4, vaempty) = v0 & $i(v7) & $i(v6) & $i(v5) & $i(v4)) |  ? [v4:
      $i] :  ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] : (v3 = verror &  ~ (v5 =
        v4) & vVGreater(v5, v6) = v1 & vrcons(v7, vrempty) = v2 & vacons(v4,
        vaempty) = v0 & $i(v7) & $i(v6) & $i(v5) & $i(v4)) |  ? [v4: $i] :  ?
    [v5: $i] :  ? [v6: $i] :  ? [v7: $i] : (v3 = verror &  ~ (v5 = v4) &
      vVEquals(v5, v6) = v1 & vrcons(v7, vrempty) = v2 & vacons(v4, vaempty) =
      v0 & $i(v7) & $i(v6) & $i(v5) & $i(v4)) |  ? [v4: $i] :  ? [v5: $i] :  ?
    [v6: $i] :  ? [v7: $i] : (v3 = visTrue & vVEquals(v4, v7) = v1 & vrcons(v7,
        v6) = v2 & vacons(v4, v5) = v0 & $i(v7) & $i(v6) & $i(v5) & $i(v4) & ( ~
        (v6 = vrempty) |  ~ (v5 = vaempty))) |  ? [v4: $i] :  ? [v5: $i] :  ?
    [v6: $i] : (v3 = visFalse &  ~ (v6 = v5) & vVEquals(v4, v6) = v1 &
      vrcons(v5, vrempty) = v2 & vacons(v4, vaempty) = v0 & $i(v6) & $i(v5) &
      $i(v4)) |  ? [v4: $i] :  ? [v5: $i] :  ? [v6: $i] : (v3 = visTrue &
      vle(v5, v6) = 0 & vVSmaller(v4, v6) = v1 & vrcons(v5, vrempty) = v2 &
      vacons(v4, vaempty) = v0 & $i(v6) & $i(v5) & $i(v4)) |  ? [v4: $i] :  ?
    [v5: $i] :  ? [v6: $i] : (v3 = visTrue & vge(v5, v6) = 0 & vVGreater(v4, v6)
      = v1 & vrcons(v5, vrempty) = v2 & vacons(v4, vaempty) = v0 & $i(v6) &
      $i(v5) & $i(v4)) |  ? [v4: $i] :  ? [v5: $i] : (v3 = visTrue &
      vVEquals(v4, v5) = v1 & vrcons(v5, vrempty) = v2 & vacons(v4, vaempty) =
      v0 & $i(v5) & $i(v4)))

  (test-4)
  $i(vrow3) & $i(vrow1) & $i(vrow2) & $i(vtempty) &  ? [v0: $i] :  ? [v1: $i] : 
  ? [v2: $i] :  ? [v3: $i] : (vtcons(vrow3, v2) = v3 & vtcons(vrow1, v0) = v1 &
    vtcons(vrow1, vtempty) = v2 & vtcons(vrow2, vtempty) = v0 & $i(v3) & $i(v2)
    & $i(v1) & $i(v0) &  ? [v4: $i] : ( ~ (v4 = v0) & vrawDifference(v1, v3) =
      v4 & $i(v4)))

  (function-axioms)
   ! [v0: MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2: $i] :  !
  [v3: $i] :  ! [v4: $i] : (v1 = v0 |  ~ (vtcheck(v4, v3, v2) = v1) |  ~
    (vtcheck(v4, v3, v2) = v0)) &  ! [v0: MultipleValueBool] :  ! [v1:
    MultipleValueBool] :  ! [v2: $i] :  ! [v3: $i] :  ! [v4: $i] : (v1 = v0 |  ~
    (vctypeIn(v4, v3, v2) = v1) |  ~ (vctypeIn(v4, v3, v2) = v0)) &  ! [v0: $i]
  :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] :  ! [v4: $i] : (v1 = v0 |  ~
    (vbindContext(v4, v3, v2) = v1) |  ~ (vbindContext(v4, v3, v2) = v0)) &  !
  [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] :  ! [v4: $i] : (v1 = v0 | 
    ~ (vsingleRowSelect(v4, v3, v2) = v1) |  ~ (vsingleRowSelect(v4, v3, v2) =
      v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] :  ! [v4: $i]
  : (v1 = v0 |  ~ (vSelectSomeFromWhere(v4, v3, v2) = v1) |  ~
    (vSelectSomeFromWhere(v4, v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  !
  [v2: $i] :  ! [v3: $i] :  ! [v4: $i] : (v1 = v0 |  ~ (vbindStore(v4, v3, v2) =
      v1) |  ~ (vbindStore(v4, v3, v2) = v0)) &  ! [v0: MultipleValueBool] :  !
  [v1: MultipleValueBool] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
    (vStoreContextConsistent(v3, v2) = v1) |  ~ (vStoreContextConsistent(v3, v2)
      = v0)) &  ! [v0: MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2:
    $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vcheckPValidity(v3, v2) = v1) |  ~
    (vcheckPValidity(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : 
  ! [v3: $i] : (v1 = v0 |  ~ (vprojectType(v3, v2) = v1) |  ~ (vprojectType(v3,
        v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1
    = v0 |  ~ (vfindColType(v3, v2) = v1) |  ~ (vfindColType(v3, v2) = v0)) &  !
  [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
    (vlookupContext(v3, v2) = v1) |  ~ (vlookupContext(v3, v2) = v0)) &  ! [v0:
    $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
    (vdifference(v3, v2) = v1) |  ~ (vdifference(v3, v2) = v0)) &  ! [v0: $i] : 
  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vintersect(v3, v2) =
      v1) |  ~ (vintersect(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2:
    $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vunion(v3, v2) = v1) |  ~ (vunion(v3, v2)
      = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0
    |  ~ (vselect(v3, v2) = v1) |  ~ (vselect(v3, v2) = v0)) &  ! [v0:
    MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2: $i] :  ! [v3: $i]
  : (v1 = v0 |  ~ (vle(v3, v2) = v1) |  ~ (vle(v3, v2) = v0)) &  ! [v0:
    MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2: $i] :  ! [v3: $i]
  : (v1 = v0 |  ~ (vge(v3, v2) = v1) |  ~ (vge(v3, v2) = v0)) &  ! [v0: $i] :  !
  [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vproject(v3, v2) = v1) |
     ~ (vproject(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  !
  [v3: $i] : (v1 = v0 |  ~ (vfindCol(v3, v2) = v1) |  ~ (vfindCol(v3, v2) = v0))
  &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
    (vconf(v3, v2) = v1) |  ~ (vconf(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i]
  :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vrawDifference(v3, v2) = v1) |  ~
    (vrawDifference(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : 
  ! [v3: $i] : (v1 = v0 |  ~ (vrawIntersection(v3, v2) = v1) |  ~
    (vrawIntersection(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :
   ! [v3: $i] : (v1 = v0 |  ~ (vrawUnion(v3, v2) = v1) |  ~ (vrawUnion(v3, v2) =
      v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 | 
    ~ (vattachColToFrontRaw(v3, v2) = v1) |  ~ (vattachColToFrontRaw(v3, v2) =
      v0)) &  ! [v0: MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2:
    $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vrowIn(v3, v2) = v1) |  ~ (vrowIn(v3, v2)
      = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0
    |  ~ (vDifference(v3, v2) = v1) |  ~ (vDifference(v3, v2) = v0)) &  ! [v0:
    $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
    (vIntersection(v3, v2) = v1) |  ~ (vIntersection(v3, v2) = v0)) &  ! [v0:
    $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vUnion(v3,
        v2) = v1) |  ~ (vUnion(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  !
  [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vSelectAllFromWhere(v3, v2) = v1) |  ~
    (vSelectAllFromWhere(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2:
    $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vSelectSomeFrom(v3, v2) = v1) |  ~
    (vSelectSomeFrom(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : 
  ! [v3: $i] : (v1 = v0 |  ~ (vVSmaller(v3, v2) = v1) |  ~ (vVSmaller(v3, v2) =
      v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 | 
    ~ (vVGreater(v3, v2) = v1) |  ~ (vVGreater(v3, v2) = v0)) &  ! [v0: $i] :  !
  [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vVEquals(v3, v2) = v1) |
     ~ (vVEquals(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  !
  [v3: $i] : (v1 = v0 |  ~ (vlookupStore(v3, v2) = v1) |  ~ (vlookupStore(v3,
        v2) = v0)) &  ! [v0: MultipleValueBool] :  ! [v1: MultipleValueBool] : 
  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vwelltypedRow(v3, v2) = v1) |  ~
    (vwelltypedRow(v3, v2) = v0)) &  ! [v0: MultipleValueBool] :  ! [v1:
    MultipleValueBool] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
    (vwelltypedRawtable(v3, v2) = v1) |  ~ (vwelltypedRawtable(v3, v2) = v0)) & 
  ! [v0: MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2: $i] :  ! [v3:
    $i] : (v1 = v0 |  ~ (vwelltypedtable(v3, v2) = v1) |  ~ (vwelltypedtable(v3,
        v2) = v0)) &  ! [v0: MultipleValueBool] :  ! [v1: MultipleValueBool] : 
  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vmatchingAList(v3, v2) = v1) |  ~
    (vmatchingAList(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : 
  ! [v3: $i] : (v1 = v0 |  ~ (vtable(v3, v2) = v1) |  ~ (vtable(v3, v2) = v0)) &
   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
    (vtcons(v3, v2) = v1) |  ~ (vtcons(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1:
    $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vrcons(v3, v2) = v1) |  ~
    (vrcons(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3:
    $i] : (v1 = v0 |  ~ (vrtcons(v3, v2) = v1) |  ~ (vrtcons(v3, v2) = v0)) &  !
  [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
    (vttcons(v3, v2) = v1) |  ~ (vttcons(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1:
    $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vctype(v3, v2) = v1) |  ~
    (vctype(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3:
    $i] : (v1 = v0 |  ~ (vappend(v3, v2) = v1) |  ~ (vappend(v3, v2) = v0)) &  !
  [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~ (vacons(v3,
        v2) = v1) |  ~ (vacons(v3, v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  !
  [v2: $i] : (v1 = v0 |  ~ (vgetSomeFType(v2) = v1) |  ~ (vgetSomeFType(v2) =
      v0)) &  ! [v0: MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2:
    $i] : (v1 = v0 |  ~ (visSomeFType(v2) = v1) |  ~ (visSomeFType(v2) = v0)) & 
  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vsomeFType(v2) = v1) |
     ~ (vsomeFType(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 =
    v0 |  ~ (vgetSomeTType(v2) = v1) |  ~ (vgetSomeTType(v2) = v0)) &  ! [v0:
    MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2: $i] : (v1 = v0 | 
    ~ (visSomeTType(v2) = v1) |  ~ (visSomeTType(v2) = v0)) &  ! [v0: $i] :  !
  [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vsomeTType(v2) = v1) |  ~
    (vsomeTType(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0
    |  ~ (vreduce(v2) = v1) |  ~ (vreduce(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i]
  :  ! [v2: $i] : (v1 = v0 |  ~ (vprojectEmptyCol(v2) = v1) |  ~
    (vprojectEmptyCol(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1
    = v0 |  ~ (vgetSomeConf(v2) = v1) |  ~ (vgetSomeConf(v2) = v0)) &  ! [v0:
    MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2: $i] : (v1 = v0 | 
    ~ (visSomeConf(v2) = v1) |  ~ (visSomeConf(v2) = v0)) &  ! [v0: $i] :  !
  [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vsomeConf(v2) = v1) |  ~
    (vsomeConf(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |
     ~ (vgetQuery(v2) = v1) |  ~ (vgetQuery(v2) = v0)) &  ! [v0: $i] :  ! [v1:
    $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vgetSomeRawTable(v2) = v1) |  ~
    (vgetSomeRawTable(v2) = v0)) &  ! [v0: MultipleValueBool] :  ! [v1:
    MultipleValueBool] :  ! [v2: $i] : (v1 = v0 |  ~ (visSomeRawTable(v2) = v1)
    |  ~ (visSomeRawTable(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :
  (v1 = v0 |  ~ (vsomeRawTable(v2) = v1) |  ~ (vsomeRawTable(v2) = v0)) &  !
  [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vdropFirstColRaw(v2) =
      v1) |  ~ (vdropFirstColRaw(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  !
  [v2: $i] : (v1 = v0 |  ~ (vprojectFirstRaw(v2) = v1) |  ~
    (vprojectFirstRaw(v2) = v0)) &  ! [v0: MultipleValueBool] :  ! [v1:
    MultipleValueBool] :  ! [v2: $i] : (v1 = v0 |  ~ (visValue(v2) = v1) |  ~
    (visValue(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 | 
    ~ (vSelectAllFrom(v2) = v1) |  ~ (vSelectAllFrom(v2) = v0)) &  ! [v0: $i] : 
  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vTvalue(v2) = v1) |  ~ (vTvalue(v2)
      = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vRef(v2)
      = v1) |  ~ (vRef(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :
  (v1 = v0 |  ~ (vgetSomeTable(v2) = v1) |  ~ (vgetSomeTable(v2) = v0)) &  !
  [v0: MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2: $i] : (v1 = v0
    |  ~ (visSomeTable(v2) = v1) |  ~ (visSomeTable(v2) = v0)) &  ! [v0: $i] : 
  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vsomeTable(v2) = v1) |  ~
    (vsomeTable(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0
    |  ~ (vfieldType(v2) = v1) |  ~ (vfieldType(v2) = v0)) &  ! [v0: $i] :  !
  [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~ (vrawType(v2) = v1) |  ~ (vrawType(v2)
      = v0)) &  ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~
    (vgetAL(v2) = v1) |  ~ (vgetAL(v2) = v0)) &  ! [v0: $i] :  ! [v1: $i] :  !
  [v2: $i] : (v1 = v0 |  ~ (vgetRaw(v2) = v1) |  ~ (vgetRaw(v2) = v0)) &  ? [v0:
    $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3: MultipleValueBool] : (vtcheck(v2,
      v1, v0) = v3) &  ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3:
    MultipleValueBool] : (vctypeIn(v2, v1, v0) = v3) &  ? [v0: $i] :  ? [v1: $i]
  :  ? [v2: $i] :  ? [v3: $i] : (vbindContext(v2, v1, v0) = v3 & $i(v3)) &  ?
  [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3: $i] : (vsingleRowSelect(v2, v1,
      v0) = v3 & $i(v3)) &  ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3: $i]
  : (vSelectSomeFromWhere(v2, v1, v0) = v3 & $i(v3)) &  ? [v0: $i] :  ? [v1: $i]
  :  ? [v2: $i] :  ? [v3: $i] : (vbindStore(v2, v1, v0) = v3 & $i(v3)) &  ? [v0:
    $i] :  ? [v1: $i] :  ? [v2: MultipleValueBool] :
  (vStoreContextConsistent(v1, v0) = v2) &  ? [v0: $i] :  ? [v1: $i] :  ? [v2:
    MultipleValueBool] : (vcheckPValidity(v1, v0) = v2) &  ? [v0: $i] :  ? [v1:
    $i] :  ? [v2: MultipleValueBool] : (vle(v1, v0) = v2) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: MultipleValueBool] : (vge(v1, v0) = v2) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: MultipleValueBool] : (vrowIn(v1, v0) = v2) &  ? [v0: $i] : 
  ? [v1: $i] :  ? [v2: MultipleValueBool] : (vwelltypedRow(v1, v0) = v2) &  ?
  [v0: $i] :  ? [v1: $i] :  ? [v2: MultipleValueBool] : (vwelltypedRawtable(v1,
      v0) = v2) &  ? [v0: $i] :  ? [v1: $i] :  ? [v2: MultipleValueBool] :
  (vwelltypedtable(v1, v0) = v2) &  ? [v0: $i] :  ? [v1: $i] :  ? [v2:
    MultipleValueBool] : (vmatchingAList(v1, v0) = v2) &  ? [v0: $i] :  ? [v1:
    $i] :  ? [v2: $i] : (vprojectType(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: $i] : (vfindColType(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] : 
  ? [v1: $i] :  ? [v2: $i] : (vlookupContext(v1, v0) = v2 & $i(v2)) &  ? [v0:
    $i] :  ? [v1: $i] :  ? [v2: $i] : (vdifference(v1, v0) = v2 & $i(v2)) &  ?
  [v0: $i] :  ? [v1: $i] :  ? [v2: $i] : (vintersect(v1, v0) = v2 & $i(v2)) &  ?
  [v0: $i] :  ? [v1: $i] :  ? [v2: $i] : (vunion(v1, v0) = v2 & $i(v2)) &  ?
  [v0: $i] :  ? [v1: $i] :  ? [v2: $i] : (vselect(v1, v0) = v2 & $i(v2)) &  ?
  [v0: $i] :  ? [v1: $i] :  ? [v2: $i] : (vproject(v1, v0) = v2 & $i(v2)) &  ?
  [v0: $i] :  ? [v1: $i] :  ? [v2: $i] : (vfindCol(v1, v0) = v2 & $i(v2)) &  ?
  [v0: $i] :  ? [v1: $i] :  ? [v2: $i] : (vconf(v1, v0) = v2 & $i(v2)) &  ? [v0:
    $i] :  ? [v1: $i] :  ? [v2: $i] : (vrawDifference(v1, v0) = v2 & $i(v2)) & 
  ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] : (vrawIntersection(v1, v0) = v2 &
    $i(v2)) &  ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] : (vrawUnion(v1, v0) = v2
    & $i(v2)) &  ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :
  (vattachColToFrontRaw(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ? [v1: $i] :  ?
  [v2: $i] : (vDifference(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ? [v1: $i] : 
  ? [v2: $i] : (vIntersection(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ? [v1: $i]
  :  ? [v2: $i] : (vUnion(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ? [v1: $i] : 
  ? [v2: $i] : (vSelectAllFromWhere(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: $i] : (vSelectSomeFrom(v1, v0) = v2 & $i(v2)) &  ? [v0: $i]
  :  ? [v1: $i] :  ? [v2: $i] : (vVSmaller(v1, v0) = v2 & $i(v2)) &  ? [v0: $i]
  :  ? [v1: $i] :  ? [v2: $i] : (vVGreater(v1, v0) = v2 & $i(v2)) &  ? [v0: $i]
  :  ? [v1: $i] :  ? [v2: $i] : (vVEquals(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :
   ? [v1: $i] :  ? [v2: $i] : (vlookupStore(v1, v0) = v2 & $i(v2)) &  ? [v0: $i]
  :  ? [v1: $i] :  ? [v2: $i] : (vtable(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] : 
  ? [v1: $i] :  ? [v2: $i] : (vtcons(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: $i] : (vrcons(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: $i] : (vrtcons(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: $i] : (vttcons(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: $i] : (vctype(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: $i] : (vappend(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ?
  [v1: $i] :  ? [v2: $i] : (vacons(v1, v0) = v2 & $i(v2)) &  ? [v0: $i] :  ?
  [v1: MultipleValueBool] : (visSomeFType(v0) = v1) &  ? [v0: $i] :  ? [v1:
    MultipleValueBool] : (visSomeTType(v0) = v1) &  ? [v0: $i] :  ? [v1:
    MultipleValueBool] : (visSomeConf(v0) = v1) &  ? [v0: $i] :  ? [v1:
    MultipleValueBool] : (visSomeRawTable(v0) = v1) &  ? [v0: $i] :  ? [v1:
    MultipleValueBool] : (visValue(v0) = v1) &  ? [v0: $i] :  ? [v1:
    MultipleValueBool] : (visSomeTable(v0) = v1) &  ? [v0: $i] :  ? [v1: $i] :
  (vgetSomeFType(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vsomeFType(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vgetSomeTType(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vsomeTType(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] : (vreduce(v0) = v1
    & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] : (vprojectEmptyCol(v0) = v1 & $i(v1))
  &  ? [v0: $i] :  ? [v1: $i] : (vgetSomeConf(v0) = v1 & $i(v1)) &  ? [v0: $i] :
   ? [v1: $i] : (vsomeConf(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vgetQuery(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vgetSomeRawTable(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vsomeRawTable(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vdropFirstColRaw(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vprojectFirstRaw(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vSelectAllFrom(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] : (vTvalue(v0)
    = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] : (vRef(v0) = v1 & $i(v1)) &  ?
  [v0: $i] :  ? [v1: $i] : (vgetSomeTable(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ?
  [v1: $i] : (vsomeTable(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] :
  (vfieldType(v0) = v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] : (vrawType(v0) =
    v1 & $i(v1)) &  ? [v0: $i] :  ? [v1: $i] : (vgetAL(v0) = v1 & $i(v1)) &  ?
  [v0: $i] :  ? [v1: $i] : (vgetRaw(v0) = v1 & $i(v1))

Further assumptions not needed in the proof:
--------------------------------------------
DIFF-Intersection-Difference, DIFF-SelectAllFrom-Difference,
DIFF-SelectAllFrom-Intersection, DIFF-SelectAllFrom-SelectAllFromWhere,
DIFF-SelectAllFrom-SelectSomeFrom, DIFF-SelectAllFrom-SelectSomeFromWhere,
DIFF-SelectAllFrom-Union, DIFF-SelectAllFromWhere-Difference,
DIFF-SelectAllFromWhere-Intersection,
DIFF-SelectAllFromWhere-SelectSomeFromWhere, DIFF-SelectAllFromWhere-Union,
DIFF-SelectSomeFrom-Difference, DIFF-SelectSomeFrom-Intersection,
DIFF-SelectSomeFrom-SelectAllFromWhere, DIFF-SelectSomeFrom-SelectSomeFromWhere,
DIFF-SelectSomeFrom-Union, DIFF-SelectSomeFromWhere-Difference,
DIFF-SelectSomeFromWhere-Intersection, DIFF-SelectSomeFromWhere-Union,
DIFF-Tvalue-Difference, DIFF-Tvalue-Intersection, DIFF-Tvalue-SelectAllFrom,
DIFF-Tvalue-SelectAllFromWhere, DIFF-Tvalue-SelectSomeFrom,
DIFF-Tvalue-SelectSomeFromWhere, DIFF-Tvalue-Union, DIFF-Union-Difference,
DIFF-Union-Intersection, DIFF-VEquals-VGreater, DIFF-VEquals-VSmaller,
DIFF-VGreater-VSmaller, DIFF-aempty-acons, DIFF-emptyContext-bindContext,
DIFF-emptyStore-bindStore, DIFF-error-isFalse, DIFF-error-isTrue,
DIFF-isTrue-isFalse, DIFF-noConf-someConf, DIFF-noFType-someFType,
DIFF-noRawTable-someRawTable, DIFF-noTType-someTType, DIFF-noTable-someTable,
DIFF-rempty-rcons, DIFF-rtempty-rtcons, DIFF-ttempty-ttcons, EQ-Difference,
EQ-Intersection, EQ-Ref, EQ-SelectAllFrom, EQ-SelectAllFromWhere,
EQ-SelectSomeFrom, EQ-SelectSomeFromWhere, EQ-Tvalue, EQ-Union, EQ-VEquals,
EQ-VGreater, EQ-VSmaller, EQ-acons, EQ-bindContext, EQ-bindStore, EQ-conf,
EQ-ctype, EQ-rcons, EQ-rtcons, EQ-someConf, EQ-someFType, EQ-someTType,
EQ-someTable, EQ-table, EQ-ttcons, StoreContext-Lookup-WT,
StoreContextConsistent-false-INV, StoreContextConsistent-true-INV,
StoreContextConsistent0, StoreContextConsistent1, StoreContextConsistent2,
T-Difference, T-Intersection, T-SelectAllFrom, T-SelectAllFromWhere,
T-SelectSomeFrom, T-SelectSomeFromWhere, T-TTContext-Duplicate,
T-TTContext-Swap, T-Tvalue, T-Union, append-INV, append0, append1,
attachColToFrontRaw1, attachColToFrontRaw2, attachColToFrontRaw3,
checkPValidity-false-INV, checkPValidity-true-INV, checkPValidity0,
checkPValidity1, checkPValidity2, ctypeIn-false-INV, ctypeIn-true-INV, ctypeIn0,
ctypeIn1, difference-INV, difference0, difference1, dropFirstColRaw-INV,
dropFirstColRaw2, findCol-INV, findCol0, findCol1, findCol2, findColType0,
findColType1, findColType2, getAL0, getQuery0, getRaw0, getSomeConf0,
getSomeFType0, getSomeRawTable0, getSomeTType0, getSomeTable0, intersect-INV,
intersect0, intersect1, isSomeConf-false-INV, isSomeConf-true-INV, isSomeConf0,
isSomeConf1, isSomeFType-false-INV, isSomeFType-true-INV, isSomeFType0,
isSomeFType1, isSomeRawTable-false-INV, isSomeRawTable0, isSomeTType-false-INV,
isSomeTType-true-INV, isSomeTType0, isSomeTType1, isSomeTable-false-INV,
isSomeTable-true-INV, isSomeTable0, isSomeTable1, isValue-false-INV,
isValue-true-INV, isValue0, isValue1, isValue2, isValue3, isValue4, isValue5,
isValue6, isValue7, lookupContext-INV, lookupContext0, lookupContext1,
lookupContext2, lookupStore-INV, lookupStore0, lookupStore1, lookupStore2,
matchingAList-false-INV, matchingAList-true-INV, matchingAList0, matchingAList1,
matchingAList2, project-INV, project0, project1, project2, projectFirstRaw2,
projectType0, projectType1, projectType2, rawDifference0, rawDifference1,
rawDifference5, rawIntersection-INV, rawIntersection0, rawIntersection1,
rawIntersection2, rawIntersection3, rawIntersection4, rawIntersection5,
rawType-INV, rawType0, rawType1, rawUnion-INV, rawUnion0, rawUnion1, rawUnion2,
rawUnion3, reduce-INV, reduce0, reduce1, reduce10, reduce11, reduce12, reduce13,
reduce14, reduce15, reduce16, reduce17, reduce18, reduce19, reduce2, reduce20,
reduce21, reduce22, reduce23, reduce24, reduce25, reduce26, reduce27, reduce28,
reduce29, reduce3, reduce30, reduce4, reduce5, reduce6, reduce7, reduce8,
reduce9, rowIn-false-INV, select-INV, select0, select1, select2, select3,
singleRowSelect0, singleRowSelect1, singleRowSelect10, singleRowSelect11,
singleRowSelect12, singleRowSelect13, singleRowSelect14, singleRowSelect15,
singleRowSelect16, singleRowSelect17, singleRowSelect2, singleRowSelect3,
singleRowSelect4, singleRowSelect5, singleRowSelect6, singleRowSelect7,
singleRowSelect8, singleRowSelect9, union-INV, union0, union1,
welltypedRawtable-false-INV, welltypedRawtable-true-INV, welltypedRawtable0,
welltypedRawtable1, welltypedRow-false-INV, welltypedRow-true-INV,
welltypedRow0, welltypedRow1, welltypedRow2, welltypedtable-false-INV,
welltypedtable-true-INV, welltypedtable0

Those formulas are unsatisfiable:
---------------------------------

Begin of proof
| 
| ALPHA: (DIFF-tempty-tcons) implies:
|   (1)   ! [v0: $i] :  ! [v1: $i] : ( ~ (vtcons(v0, v1) = vtempty) |  ~ $i(v1)
|          |  ~ $i(v0))
| 
| ALPHA: (rowIn0) implies:
|   (2)   ! [v0: $i] : ( ~ (vrowIn(v0, vtempty) = 0) |  ~ $i(v0))
| 
| ALPHA: (rowIn1) implies:
|   (3)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
|          (vrowIn(v0, v3) = 0) |  ~ (vtcons(v1, v2) = v3) |  ~ $i(v2) |  ~
|          $i(v1) |  ~ $i(v0) | vrowIn(v0, v2) = 0)
|   (4)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] :  ! [v4: int] :
|        (v4 = 0 |  ~ (vrowIn(v0, v3) = v4) |  ~ (vtcons(v1, v2) = v3) |  ~
|          $i(v2) |  ~ $i(v1) |  ~ $i(v0) | ( ~ (v1 = v0) &  ? [v5: int] : ( ~
|              (v5 = 0) & vrowIn(v0, v2) = v5)))
| 
| ALPHA: (projectFirstRaw0) implies:
|   (5)  vprojectFirstRaw(vtempty) = vtempty
| 
| ALPHA: (projectFirstRaw1) implies:
|   (6)   ! [v0: $i] :  ! [v1: $i] : ( ~ (vtcons(vrempty, v0) = v1) |  ~ $i(v0)
|          |  ? [v2: $i] :  ? [v3: $i] : (vprojectFirstRaw(v1) = v2 &
|            vprojectFirstRaw(v0) = v3 & vtcons(vrempty, v3) = v2 & $i(v3) &
|            $i(v2)))
| 
| ALPHA: (dropFirstColRaw0) implies:
|   (7)  vdropFirstColRaw(vtempty) = vtempty
| 
| ALPHA: (dropFirstColRaw1) implies:
|   (8)   ! [v0: $i] :  ! [v1: $i] : ( ~ (vtcons(vrempty, v0) = v1) |  ~ $i(v0)
|          |  ? [v2: $i] :  ? [v3: $i] : (vdropFirstColRaw(v1) = v2 &
|            vdropFirstColRaw(v0) = v3 & vtcons(vrempty, v3) = v2 & $i(v3) &
|            $i(v2)))
| 
| ALPHA: (attachColToFrontRaw0) implies:
|   (9)   ? [v0: $i] : (vattachColToFrontRaw(vtempty, vtempty) = v0 &
|          vsomeRawTable(vtempty) = v0 & $i(v0))
| 
| ALPHA: (attachColToFrontRaw-INV) implies:
|   (10)   ? [v0: $i] : (vsomeRawTable(vtempty) = v0 & $i(v0) &  ! [v1: $i] :  !
|           [v2: $i] :  ! [v3: $i] : ( ~ (vattachColToFrontRaw(v1, v2) = v3) | 
|             ~ $i(v3) |  ~ $i(v2) |  ~ $i(v1) |  ? [v4: $i] :  ? [v5: $i] :  ?
|             [v6: $i] :  ? [v7: $i] :  ? [v8: $i] :  ? [v9: $i] :  ? [v10: $i]
|             :  ? [v11: $i] :  ? [v12: $i] : (vattachColToFrontRaw(v4, v8) = v5
|               & vgetSomeRawTable(v5) = v11 & visSomeRawTable(v5) = 0 &
|               vsomeRawTable(v12) = v3 & vtcons(v10, v11) = v12 & vtcons(v9,
|                 v4) = v1 & vtcons(v6, v8) = v2 & vrcons(v7, v6) = v10 &
|               vrcons(v7, vrempty) = v9 & $i(v12) & $i(v11) & $i(v10) & $i(v9)
|               & $i(v8) & $i(v7) & $i(v6) & $i(v5) & $i(v4)) |  ? [v4: $i] :  ?
|             [v5: $i] :  ? [v6: $i] :  ? [v7: $i] :  ? [v8: $i] :  ? [v9: int]
|             :  ? [v10: $i] : (v3 = vnoRawTable &  ~ (v9 = 0) &
|               vattachColToFrontRaw(v4, v8) = v5 & visSomeRawTable(v5) = v9 &
|               vtcons(v10, v4) = v1 & vtcons(v6, v8) = v2 & vrcons(v7, vrempty)
|               = v10 & $i(v10) & $i(v8) & $i(v7) & $i(v6) & $i(v5) & $i(v4)) |
|             (v3 = v0 & v2 = vtempty & v1 = vtempty) | (v3 = vnoRawTable & ( ~
|                 (v2 = vtempty) |  ~ (v1 = vtempty)) & ( ! [v4: $i] :  ! [v5:
|                   $i] :  ! [v6: $i] : ( ~ (vtcons(v6, v5) = v1) |  ~
|                   (vrcons(v4, vrempty) = v6) |  ~ $i(v5) |  ~ $i(v4)) |  !
|                 [v4: $i] :  ! [v5: $i] : ( ~ (vtcons(v4, v5) = v2) |  ~ $i(v5)
|                   |  ~ $i(v4))))))
| 
| ALPHA: (rawDifference2) implies:
|   (11)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v3 = v2 |  ~
|           (vrawDifference(v2, v1) = v3) |  ~ (vtcons(v0, vtempty) = v2) |  ~
|           $i(v1) |  ~ $i(v0) | vrowIn(v0, v1) = 0)
| 
| ALPHA: (rawDifference3) implies:
|   (12)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v3 = vtempty
|           |  ~ (vrawDifference(v2, v1) = v3) |  ~ (vtcons(v0, vtempty) = v2) |
|            ~ $i(v1) |  ~ $i(v0) |  ? [v4: int] : ( ~ (v4 = 0) & vrowIn(v0, v1)
|             = v4))
| 
| ALPHA: (rawDifference4) implies:
|   (13)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] :  ! [v4: $i] : 
|         ! [v5: $i] :  ! [v6: $i] : (v6 = v5 | v1 = vtempty |  ~
|           (vrawDifference(v4, v2) = v5) |  ~ (vtcons(v3, v1) = v4) |  ~
|           (vtcons(v3, v0) = v6) |  ~ $i(v3) |  ~ $i(v2) |  ~ $i(v1) |  ~
|           $i(v0) |  ? [v7: $i] :  ? [v8: int] : ((v8 = 0 & vrowIn(v3, v2) = 0)
|             | ( ~ (v7 = v0) & vrawDifference(v1, v2) = v7 & $i(v7))))
| 
| ALPHA: (rawDifference-INV) implies:
|   (14)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : ( ~ (vrawDifference(v0, v1)
|             = v2) |  ~ $i(v2) |  ~ $i(v1) |  ~ $i(v0) |  ? [v3: $i] :  ? [v4:
|             $i] :  ? [v5: $i] :  ? [v6: int] : ( ~ (v6 = 0) &  ~ (v4 =
|               vtempty) & vrawDifference(v4, v1) = v3 & vrowIn(v5, v1) = v6 &
|             vtcons(v5, v4) = v0 & vtcons(v5, v3) = v2 & $i(v5) & $i(v4) &
|             $i(v3)) |  ? [v3: $i] :  ? [v4: int] : (v2 = v0 &  ~ (v4 = 0) &
|             vrowIn(v3, v1) = v4 & vtcons(v3, vtempty) = v0 & $i(v3)) |  ? [v3:
|             $i] :  ? [v4: $i] : ( ~ (v3 = vtempty) & vrawDifference(v3, v1) =
|             v2 & vrowIn(v4, v1) = 0 & vtcons(v4, v3) = v0 & $i(v4) & $i(v3)) |
|            ? [v3: $i] : (v2 = vtempty & vrowIn(v3, v1) = 0 & vtcons(v3,
|               vtempty) = v0 & $i(v3)) | (v2 = v0 & v1 = vtempty) | (v2 =
|             vtempty & v0 = vtempty))
| 
| ALPHA: (projectEmptyCol0) implies:
|   (15)  vprojectEmptyCol(vtempty) = vtempty
| 
| ALPHA: (projectEmptyCol1) implies:
|   (16)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : ( ~ (vtcons(v0, v1) = v2) | 
|           ~ $i(v1) |  ~ $i(v0) |  ? [v3: $i] :  ? [v4: $i] :
|           (vprojectEmptyCol(v2) = v3 & vprojectEmptyCol(v1) = v4 &
|             vtcons(vrempty, v4) = v3 & $i(v4) & $i(v3)))
| 
| ALPHA: (singleRowSelect-INV) implies:
|   (17)  $i(vrempty)
| 
| ALPHA: (DIFF-row1-row2) implies:
|   (18)   ~ (vrow1 = vrow2)
| 
| ALPHA: (DIFF-row1-row3) implies:
|   (19)   ~ (vrow3 = vrow1)
| 
| ALPHA: (DIFF-row2-row3) implies:
|   (20)   ~ (vrow3 = vrow2)
| 
| ALPHA: (test-4) implies:
|   (21)  $i(vtempty)
|   (22)  $i(vrow2)
|   (23)  $i(vrow1)
|   (24)  $i(vrow3)
|   (25)   ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3: $i] : (vtcons(vrow3,
|             v2) = v3 & vtcons(vrow1, v0) = v1 & vtcons(vrow1, vtempty) = v2 &
|           vtcons(vrow2, vtempty) = v0 & $i(v3) & $i(v2) & $i(v1) & $i(v0) &  ?
|           [v4: $i] : ( ~ (v4 = v0) & vrawDifference(v1, v3) = v4 & $i(v4)))
| 
| ALPHA: (function-axioms) implies:
|   (26)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~
|           (vprojectFirstRaw(v2) = v1) |  ~ (vprojectFirstRaw(v2) = v0))
|   (27)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~
|           (vdropFirstColRaw(v2) = v1) |  ~ (vdropFirstColRaw(v2) = v0))
|   (28)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~
|           (vsomeRawTable(v2) = v1) |  ~ (vsomeRawTable(v2) = v0))
|   (29)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] : (v1 = v0 |  ~
|           (vprojectEmptyCol(v2) = v1) |  ~ (vprojectEmptyCol(v2) = v0))
|   (30)   ! [v0: $i] :  ! [v1: $i] :  ! [v2: $i] :  ! [v3: $i] : (v1 = v0 |  ~
|           (vtcons(v3, v2) = v1) |  ~ (vtcons(v3, v2) = v0))
|   (31)   ! [v0: MultipleValueBool] :  ! [v1: MultipleValueBool] :  ! [v2: $i]
|         :  ! [v3: $i] : (v1 = v0 |  ~ (vrowIn(v3, v2) = v1) |  ~ (vrowIn(v3,
|               v2) = v0))
| 
| DELTA: instantiating (9) with fresh symbol all_422_0 gives:
|   (32)  vattachColToFrontRaw(vtempty, vtempty) = all_422_0 &
|         vsomeRawTable(vtempty) = all_422_0 & $i(all_422_0)
| 
| ALPHA: (32) implies:
|   (33)  vsomeRawTable(vtempty) = all_422_0
| 
| DELTA: instantiating (25) with fresh symbols all_427_0, all_427_1, all_427_2,
|        all_427_3 gives:
Warning: type clash during inference: int vs $i
|   (34)  vtcons(vrow3, all_427_1) = all_427_0 & vtcons(vrow1, all_427_3) =
|         all_427_2 & vtcons(vrow1, vtempty) = all_427_1 & vtcons(vrow2,
|           vtempty) = all_427_3 & $i(all_427_0) & $i(all_427_1) & $i(all_427_2)
|         & $i(all_427_3) &  ? [v0: any] : ( ~ (v0 = all_427_3) &
|           vrawDifference(all_427_2, all_427_0) = v0 & $i(v0))
| 
| ALPHA: (34) implies:
|   (35)  $i(all_427_3)
|   (36)  $i(all_427_2)
|   (37)  $i(all_427_1)
|   (38)  $i(all_427_0)
|   (39)  vtcons(vrow2, vtempty) = all_427_3
|   (40)  vtcons(vrow1, vtempty) = all_427_1
|   (41)  vtcons(vrow1, all_427_3) = all_427_2
|   (42)  vtcons(vrow3, all_427_1) = all_427_0
Warning: type clash during inference: int vs $i
|   (43)   ? [v0: any] : ( ~ (v0 = all_427_3) & vrawDifference(all_427_2,
|             all_427_0) = v0 & $i(v0))
| 
| DELTA: instantiating (10) with fresh symbol all_439_0 gives:
|   (44)  vsomeRawTable(vtempty) = all_439_0 & $i(all_439_0) &  ! [v0: $i] :  !
|         [v1: $i] :  ! [v2: $i] : ( ~ (vattachColToFrontRaw(v0, v1) = v2) |  ~
|           $i(v2) |  ~ $i(v1) |  ~ $i(v0) |  ? [v3: $i] :  ? [v4: $i] :  ? [v5:
|             $i] :  ? [v6: $i] :  ? [v7: $i] :  ? [v8: $i] :  ? [v9: $i] :  ?
|           [v10: $i] :  ? [v11: $i] : (vattachColToFrontRaw(v3, v7) = v4 &
|             vgetSomeRawTable(v4) = v10 & visSomeRawTable(v4) = 0 &
|             vsomeRawTable(v11) = v2 & vtcons(v9, v10) = v11 & vtcons(v8, v3) =
|             v0 & vtcons(v5, v7) = v1 & vrcons(v6, v5) = v9 & vrcons(v6,
|               vrempty) = v8 & $i(v11) & $i(v10) & $i(v9) & $i(v8) & $i(v7) &
|             $i(v6) & $i(v5) & $i(v4) & $i(v3)) |  ? [v3: $i] :  ? [v4: $i] : 
|           ? [v5: $i] :  ? [v6: $i] :  ? [v7: $i] :  ? [v8: int] :  ? [v9: $i]
|           : (v2 = vnoRawTable &  ~ (v8 = 0) & vattachColToFrontRaw(v3, v7) =
|             v4 & visSomeRawTable(v4) = v8 & vtcons(v9, v3) = v0 & vtcons(v5,
|               v7) = v1 & vrcons(v6, vrempty) = v9 & $i(v9) & $i(v7) & $i(v6) &
|             $i(v5) & $i(v4) & $i(v3)) | (v2 = all_439_0 & v1 = vtempty & v0 =
|             vtempty) | (v2 = vnoRawTable & ( ~ (v1 = vtempty) |  ~ (v0 =
|                 vtempty)) & ( ! [v3: $i] :  ! [v4: $i] :  ! [v5: $i] : ( ~
|                 (vtcons(v5, v4) = v0) |  ~ (vrcons(v3, vrempty) = v5) |  ~
|                 $i(v4) |  ~ $i(v3)) |  ! [v3: $i] :  ! [v4: $i] : ( ~
|                 (vtcons(v3, v4) = v1) |  ~ $i(v4) |  ~ $i(v3)))))
| 
| ALPHA: (44) implies:
|   (45)  $i(all_439_0)
|   (46)  vsomeRawTable(vtempty) = all_439_0
| 
| DELTA: instantiating (43) with fresh symbol all_442_0 gives:
|   (47)   ~ (all_442_0 = all_427_3) & vrawDifference(all_427_2, all_427_0) =
|         all_442_0 & $i(all_442_0)
| 
| ALPHA: (47) implies:
|   (48)   ~ (all_442_0 = all_427_3)
|   (49)  $i(all_442_0)
|   (50)  vrawDifference(all_427_2, all_427_0) = all_442_0
| 
| GROUND_INST: instantiating (28) with all_422_0, all_439_0, vtempty,
|              simplifying with (33), (46) gives:
|   (51)  all_439_0 = all_422_0
| 
| REDUCE: (45), (51) imply:
|   (52)  $i(all_422_0)
| 
| GROUND_INST: instantiating (16) with vrow2, vtempty, all_427_3, simplifying
|              with (21), (22), (39) gives:
|   (53)   ? [v0: $i] :  ? [v1: $i] : (vprojectEmptyCol(all_427_3) = v0 &
|           vprojectEmptyCol(vtempty) = v1 & vtcons(vrempty, v1) = v0 & $i(v1) &
|           $i(v0))
| 
| GROUND_INST: instantiating (16) with vrow1, vtempty, all_427_1, simplifying
|              with (21), (23), (40) gives:
|   (54)   ? [v0: $i] :  ? [v1: $i] : (vprojectEmptyCol(all_427_1) = v0 &
|           vprojectEmptyCol(vtempty) = v1 & vtcons(vrempty, v1) = v0 & $i(v1) &
|           $i(v0))
| 
| GROUND_INST: instantiating (16) with vrow1, all_427_3, all_427_2, simplifying
|              with (23), (35), (41) gives:
|   (55)   ? [v0: $i] :  ? [v1: $i] : (vprojectEmptyCol(all_427_2) = v0 &
|           vprojectEmptyCol(all_427_3) = v1 & vtcons(vrempty, v1) = v0 & $i(v1)
|           & $i(v0))
| 
| GROUND_INST: instantiating (16) with vrow3, all_427_1, all_427_0, simplifying
|              with (24), (37), (42) gives:
|   (56)   ? [v0: $i] :  ? [v1: $i] : (vprojectEmptyCol(all_427_0) = v0 &
|           vprojectEmptyCol(all_427_1) = v1 & vtcons(vrempty, v1) = v0 & $i(v1)
|           & $i(v0))
| 
| GROUND_INST: instantiating (isSomeRawTable1) with vtempty, all_422_0,
|              simplifying with (21), (33) gives:
|   (57)  visSomeRawTable(all_422_0) = 0
| 
| GROUND_INST: instantiating (13) with vtempty, all_427_3, all_427_0, vrow1,
|              all_427_2, all_442_0, all_427_1, simplifying with (21), (23),
|              (35), (38), (40), (41), (50) gives:
|   (58)  all_442_0 = all_427_1 | all_427_3 = vtempty |  ? [v0: $i] :  ? [v1:
|           int] : ((v1 = 0 & vrowIn(vrow1, all_427_0) = 0) | ( ~ (v0 = vtempty)
|             & vrawDifference(all_427_3, all_427_0) = v0 & $i(v0)))
| 
| GROUND_INST: instantiating (14) with all_427_2, all_427_0, all_442_0,
|              simplifying with (36), (38), (49), (50) gives:
|   (59)   ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3: int] : ( ~ (v3 = 0)
|           &  ~ (v1 = vtempty) & vrawDifference(v1, all_427_0) = v0 &
|           vrowIn(v2, all_427_0) = v3 & vtcons(v2, v1) = all_427_2 & vtcons(v2,
|             v0) = all_442_0 & $i(v2) & $i(v1) & $i(v0)) |  ? [v0: $i] :  ?
|         [v1: int] : (all_442_0 = all_427_2 &  ~ (v1 = 0) & vrowIn(v0,
|             all_427_0) = v1 & vtcons(v0, vtempty) = all_427_2 & $i(v0)) |  ?
|         [v0: $i] :  ? [v1: $i] : ( ~ (v0 = vtempty) & vrawDifference(v0,
|             all_427_0) = all_442_0 & vrowIn(v1, all_427_0) = 0 & vtcons(v1,
|             v0) = all_427_2 & $i(v1) & $i(v0)) |  ? [v0: $i] : (all_442_0 =
|           vtempty & vrowIn(v0, all_427_0) = 0 & vtcons(v0, vtempty) =
|           all_427_2 & $i(v0)) | (all_442_0 = all_427_2 & all_427_0 = vtempty)
|         | (all_442_0 = vtempty & all_427_2 = vtempty)
| 
| DELTA: instantiating (56) with fresh symbols all_454_0, all_454_1 gives:
|   (60)  vprojectEmptyCol(all_427_0) = all_454_1 & vprojectEmptyCol(all_427_1)
|         = all_454_0 & vtcons(vrempty, all_454_0) = all_454_1 & $i(all_454_0) &
|         $i(all_454_1)
| 
| ALPHA: (60) implies:
|   (61)  vtcons(vrempty, all_454_0) = all_454_1
|   (62)  vprojectEmptyCol(all_427_1) = all_454_0
| 
| DELTA: instantiating (55) with fresh symbols all_456_0, all_456_1 gives:
|   (63)  vprojectEmptyCol(all_427_2) = all_456_1 & vprojectEmptyCol(all_427_3)
|         = all_456_0 & vtcons(vrempty, all_456_0) = all_456_1 & $i(all_456_0) &
|         $i(all_456_1)
| 
| ALPHA: (63) implies:
|   (64)  vtcons(vrempty, all_456_0) = all_456_1
|   (65)  vprojectEmptyCol(all_427_3) = all_456_0
|   (66)  vprojectEmptyCol(all_427_2) = all_456_1
| 
| DELTA: instantiating (54) with fresh symbols all_458_0, all_458_1 gives:
|   (67)  vprojectEmptyCol(all_427_1) = all_458_1 & vprojectEmptyCol(vtempty) =
|         all_458_0 & vtcons(vrempty, all_458_0) = all_458_1 & $i(all_458_0) &
|         $i(all_458_1)
| 
| ALPHA: (67) implies:
|   (68)  $i(all_458_0)
|   (69)  vtcons(vrempty, all_458_0) = all_458_1
|   (70)  vprojectEmptyCol(vtempty) = all_458_0
|   (71)  vprojectEmptyCol(all_427_1) = all_458_1
| 
| DELTA: instantiating (53) with fresh symbols all_460_0, all_460_1 gives:
|   (72)  vprojectEmptyCol(all_427_3) = all_460_1 & vprojectEmptyCol(vtempty) =
|         all_460_0 & vtcons(vrempty, all_460_0) = all_460_1 & $i(all_460_0) &
|         $i(all_460_1)
| 
| ALPHA: (72) implies:
|   (73)  $i(all_460_1)
|   (74)  vtcons(vrempty, all_460_0) = all_460_1
|   (75)  vprojectEmptyCol(vtempty) = all_460_0
|   (76)  vprojectEmptyCol(all_427_3) = all_460_1
| 
| GROUND_INST: instantiating (29) with vtempty, all_460_0, vtempty, simplifying
|              with (15), (75) gives:
|   (77)  all_460_0 = vtempty
| 
| GROUND_INST: instantiating (29) with all_458_0, all_460_0, vtempty,
|              simplifying with (70), (75) gives:
|   (78)  all_460_0 = all_458_0
| 
| GROUND_INST: instantiating (29) with all_456_0, all_460_1, all_427_3,
|              simplifying with (65), (76) gives:
|   (79)  all_460_1 = all_456_0
| 
| GROUND_INST: instantiating (29) with all_454_0, all_458_1, all_427_1,
|              simplifying with (62), (71) gives:
|   (80)  all_458_1 = all_454_0
| 
| COMBINE_EQS: (77), (78) imply:
|   (81)  all_458_0 = vtempty
| 
| REDUCE: (74), (77), (79) imply:
|   (82)  vtcons(vrempty, vtempty) = all_456_0
| 
| REDUCE: (69), (80), (81) imply:
|   (83)  vtcons(vrempty, vtempty) = all_454_0
| 
| REDUCE: (73), (79) imply:
|   (84)  $i(all_456_0)
| 
| GROUND_INST: instantiating (30) with all_454_0, all_456_0, vtempty, vrempty,
|              simplifying with (82), (83) gives:
|   (85)  all_456_0 = all_454_0
| 
| REDUCE: (65), (85) imply:
|   (86)  vprojectEmptyCol(all_427_3) = all_454_0
| 
| REDUCE: (64), (85) imply:
|   (87)  vtcons(vrempty, all_454_0) = all_456_1
| 
| REDUCE: (84), (85) imply:
|   (88)  $i(all_454_0)
| 
| GROUND_INST: instantiating (30) with all_454_1, all_456_1, all_454_0, vrempty,
|              simplifying with (61), (87) gives:
|   (89)  all_456_1 = all_454_1
| 
| REDUCE: (66), (89) imply:
|   (90)  vprojectEmptyCol(all_427_2) = all_454_1
| 
| GROUND_INST: instantiating (8) with vtempty, all_454_0, simplifying with (21),
|              (83) gives:
|   (91)   ? [v0: $i] :  ? [v1: $i] : (vdropFirstColRaw(all_454_0) = v0 &
|           vdropFirstColRaw(vtempty) = v1 & vtcons(vrempty, v1) = v0 & $i(v1) &
|           $i(v0))
| 
| GROUND_INST: instantiating (6) with vtempty, all_454_0, simplifying with (21),
|              (83) gives:
|   (92)   ? [v0: $i] :  ? [v1: $i] : (vprojectFirstRaw(all_454_0) = v0 &
|           vprojectFirstRaw(vtempty) = v1 & vtcons(vrempty, v1) = v0 & $i(v1) &
|           $i(v0))
| 
| GROUND_INST: instantiating (16) with vrempty, vtempty, all_454_0, simplifying
|              with (17), (21), (83) gives:
|   (93)   ? [v0: $i] :  ? [v1: $i] : (vprojectEmptyCol(all_454_0) = v0 &
|           vprojectEmptyCol(vtempty) = v1 & vtcons(vrempty, v1) = v0 & $i(v1) &
|           $i(v0))
| 
| GROUND_INST: instantiating (8) with all_454_0, all_454_1, simplifying with
|              (61), (88) gives:
|   (94)   ? [v0: $i] :  ? [v1: $i] : (vdropFirstColRaw(all_454_0) = v1 &
|           vdropFirstColRaw(all_454_1) = v0 & vtcons(vrempty, v1) = v0 & $i(v1)
|           & $i(v0))
| 
| GROUND_INST: instantiating (6) with all_454_0, all_454_1, simplifying with
|              (61), (88) gives:
|   (95)   ? [v0: $i] :  ? [v1: $i] : (vprojectFirstRaw(all_454_0) = v1 &
|           vprojectFirstRaw(all_454_1) = v0 & vtcons(vrempty, v1) = v0 & $i(v1)
|           & $i(v0))
| 
| GROUND_INST: instantiating (16) with vrempty, all_454_0, all_454_1,
|              simplifying with (17), (61), (88) gives:
|   (96)   ? [v0: $i] :  ? [v1: $i] : (vprojectEmptyCol(all_454_0) = v1 &
|           vprojectEmptyCol(all_454_1) = v0 & vtcons(vrempty, v1) = v0 & $i(v1)
|           & $i(v0))
| 
| GROUND_INST: instantiating (isSomeRawTable-true-INV) with all_422_0,
|              simplifying with (52), (57) gives:
|   (97)   ? [v0: $i] : (vsomeRawTable(v0) = all_422_0 & $i(v0))
| 
| DELTA: instantiating (97) with fresh symbol all_481_0 gives:
|   (98)  vsomeRawTable(all_481_0) = all_422_0 & $i(all_481_0)
| 
| ALPHA: (98) implies:
|   (99)  $i(all_481_0)
|   (100)  vsomeRawTable(all_481_0) = all_422_0
| 
| DELTA: instantiating (94) with fresh symbols all_483_0, all_483_1 gives:
|   (101)  vdropFirstColRaw(all_454_0) = all_483_0 & vdropFirstColRaw(all_454_1)
|          = all_483_1 & vtcons(vrempty, all_483_0) = all_483_1 & $i(all_483_0)
|          & $i(all_483_1)
| 
| ALPHA: (101) implies:
|   (102)  $i(all_483_1)
|   (103)  vtcons(vrempty, all_483_0) = all_483_1
|   (104)  vdropFirstColRaw(all_454_0) = all_483_0
| 
| DELTA: instantiating (92) with fresh symbols all_485_0, all_485_1 gives:
|   (105)  vprojectFirstRaw(all_454_0) = all_485_1 & vprojectFirstRaw(vtempty) =
|          all_485_0 & vtcons(vrempty, all_485_0) = all_485_1 & $i(all_485_0) &
|          $i(all_485_1)
| 
| ALPHA: (105) implies:
|   (106)  $i(all_485_0)
|   (107)  vtcons(vrempty, all_485_0) = all_485_1
|   (108)  vprojectFirstRaw(vtempty) = all_485_0
|   (109)  vprojectFirstRaw(all_454_0) = all_485_1
| 
| DELTA: instantiating (96) with fresh symbols all_487_0, all_487_1 gives:
|   (110)  vprojectEmptyCol(all_454_0) = all_487_0 & vprojectEmptyCol(all_454_1)
|          = all_487_1 & vtcons(vrempty, all_487_0) = all_487_1 & $i(all_487_0)
|          & $i(all_487_1)
| 
| ALPHA: (110) implies:
|   (111)  vtcons(vrempty, all_487_0) = all_487_1
|   (112)  vprojectEmptyCol(all_454_0) = all_487_0
| 
| DELTA: instantiating (95) with fresh symbols all_489_0, all_489_1 gives:
|   (113)  vprojectFirstRaw(all_454_0) = all_489_0 & vprojectFirstRaw(all_454_1)
|          = all_489_1 & vtcons(vrempty, all_489_0) = all_489_1 & $i(all_489_0)
|          & $i(all_489_1)
| 
| ALPHA: (113) implies:
|   (114)  vtcons(vrempty, all_489_0) = all_489_1
|   (115)  vprojectFirstRaw(all_454_0) = all_489_0
| 
| DELTA: instantiating (91) with fresh symbols all_491_0, all_491_1 gives:
|   (116)  vdropFirstColRaw(all_454_0) = all_491_1 & vdropFirstColRaw(vtempty) =
|          all_491_0 & vtcons(vrempty, all_491_0) = all_491_1 & $i(all_491_0) &
|          $i(all_491_1)
| 
| ALPHA: (116) implies:
|   (117)  vtcons(vrempty, all_491_0) = all_491_1
|   (118)  vdropFirstColRaw(vtempty) = all_491_0
|   (119)  vdropFirstColRaw(all_454_0) = all_491_1
| 
| DELTA: instantiating (93) with fresh symbols all_493_0, all_493_1 gives:
|   (120)  vprojectEmptyCol(all_454_0) = all_493_1 & vprojectEmptyCol(vtempty) =
|          all_493_0 & vtcons(vrempty, all_493_0) = all_493_1 & $i(all_493_0) &
|          $i(all_493_1)
| 
| ALPHA: (120) implies:
|   (121)  vtcons(vrempty, all_493_0) = all_493_1
|   (122)  vprojectEmptyCol(vtempty) = all_493_0
|   (123)  vprojectEmptyCol(all_454_0) = all_493_1
| 
| GROUND_INST: instantiating (26) with vtempty, all_485_0, vtempty, simplifying
|              with (5), (108) gives:
|   (124)  all_485_0 = vtempty
| 
| GROUND_INST: instantiating (26) with all_485_1, all_489_0, all_454_0,
|              simplifying with (109), (115) gives:
|   (125)  all_489_0 = all_485_1
| 
| GROUND_INST: instantiating (27) with vtempty, all_491_0, vtempty, simplifying
|              with (7), (118) gives:
|   (126)  all_491_0 = vtempty
| 
| GROUND_INST: instantiating (27) with all_483_0, all_491_1, all_454_0,
|              simplifying with (104), (119) gives:
|   (127)  all_491_1 = all_483_0
| 
| GROUND_INST: instantiating (29) with vtempty, all_493_0, vtempty, simplifying
|              with (15), (122) gives:
|   (128)  all_493_0 = vtempty
| 
| GROUND_INST: instantiating (29) with all_487_0, all_493_1, all_454_0,
|              simplifying with (112), (123) gives:
|   (129)  all_493_1 = all_487_0
| 
| REDUCE: (121), (128), (129) imply:
|   (130)  vtcons(vrempty, vtempty) = all_487_0
| 
| REDUCE: (117), (126), (127) imply:
|   (131)  vtcons(vrempty, vtempty) = all_483_0
| 
| REDUCE: (114), (125) imply:
|   (132)  vtcons(vrempty, all_485_1) = all_489_1
| 
| REDUCE: (107), (124) imply:
|   (133)  vtcons(vrempty, vtempty) = all_485_1
| 
| GROUND_INST: instantiating (30) with all_454_0, all_485_1, vtempty, vrempty,
|              simplifying with (83), (133) gives:
|   (134)  all_485_1 = all_454_0
| 
| GROUND_INST: instantiating (30) with all_485_1, all_487_0, vtempty, vrempty,
|              simplifying with (130), (133) gives:
|   (135)  all_487_0 = all_485_1
| 
| GROUND_INST: instantiating (30) with all_483_0, all_487_0, vtempty, vrempty,
|              simplifying with (130), (131) gives:
|   (136)  all_487_0 = all_483_0
| 
| COMBINE_EQS: (135), (136) imply:
|   (137)  all_485_1 = all_483_0
| 
| SIMP: (137) implies:
|   (138)  all_485_1 = all_483_0
| 
| COMBINE_EQS: (134), (138) imply:
|   (139)  all_483_0 = all_454_0
| 
| COMBINE_EQS: (136), (139) imply:
|   (140)  all_487_0 = all_454_0
| 
| REDUCE: (111), (140) imply:
|   (141)  vtcons(vrempty, all_454_0) = all_487_1
| 
| REDUCE: (132), (134) imply:
|   (142)  vtcons(vrempty, all_454_0) = all_489_1
| 
| REDUCE: (103), (139) imply:
|   (143)  vtcons(vrempty, all_454_0) = all_483_1
| 
| GROUND_INST: instantiating (30) with all_454_1, all_487_1, all_454_0, vrempty,
|              simplifying with (61), (141) gives:
|   (144)  all_487_1 = all_454_1
| 
| GROUND_INST: instantiating (30) with all_487_1, all_489_1, all_454_0, vrempty,
|              simplifying with (141), (142) gives:
|   (145)  all_489_1 = all_487_1
| 
| GROUND_INST: instantiating (30) with all_483_1, all_489_1, all_454_0, vrempty,
|              simplifying with (142), (143) gives:
|   (146)  all_489_1 = all_483_1
| 
| COMBINE_EQS: (145), (146) imply:
|   (147)  all_487_1 = all_483_1
| 
| SIMP: (147) implies:
|   (148)  all_487_1 = all_483_1
| 
| COMBINE_EQS: (144), (148) imply:
|   (149)  all_483_1 = all_454_1
| 
| REDUCE: (102), (149) imply:
|   (150)  $i(all_454_1)
| 
| GROUND_INST: instantiating (EQ-someRawTable) with vtempty, all_481_0,
|              all_422_0, simplifying with (21), (33), (99), (100) gives:
|   (151)  all_481_0 = vtempty
| 
| BETA: splitting (58) gives:
| 
| Case 1:
| | 
| |   (152)  all_427_3 = vtempty
| | 
| | REDUCE: (86), (152) imply:
| |   (153)  vprojectEmptyCol(vtempty) = all_454_0
| | 
| | REDUCE: (41), (152) imply:
| |   (154)  vtcons(vrow1, vtempty) = all_427_2
| | 
| | REDUCE: (39), (152) imply:
| |   (155)  vtcons(vrow2, vtempty) = vtempty
| | 
| | GROUND_INST: instantiating (30) with all_427_1, all_427_2, vtempty, vrow1,
| |              simplifying with (40), (154) gives:
| |   (156)  all_427_1 = all_427_2
| | 
| | GROUND_INST: instantiating (29) with vtempty, all_454_0, vtempty,
| |              simplifying with (15), (153) gives:
| |   (157)  all_454_0 = vtempty
| | 
| | REDUCE: (62), (156), (157) imply:
| |   (158)  vprojectEmptyCol(all_427_2) = vtempty
| | 
| | GROUND_INST: instantiating (29) with all_454_1, vtempty, all_427_2,
| |              simplifying with (90), (158) gives:
| |   (159)  all_454_1 = vtempty
| | 
| | GROUND_INST: instantiating (1) with vrow2, vtempty, simplifying with (21),
| |              (22), (155) gives:
| |   (160)  $false
| | 
| | CLOSE: (160) is inconsistent.
| | 
| Case 2:
| | 
| |   (161)   ~ (all_427_3 = vtempty)
| | 
| | BETA: splitting (59) gives:
| | 
| | Case 1:
| | | 
| | |   (162)   ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3: int] : ( ~ (v3
| | |              = 0) &  ~ (v1 = vtempty) & vrawDifference(v1, all_427_0) = v0
| | |            & vrowIn(v2, all_427_0) = v3 & vtcons(v2, v1) = all_427_2 &
| | |            vtcons(v2, v0) = all_442_0 & $i(v2) & $i(v1) & $i(v0)) |  ?
| | |          [v0: $i] :  ? [v1: int] : (all_442_0 = all_427_2 &  ~ (v1 = 0) &
| | |            vrowIn(v0, all_427_0) = v1 & vtcons(v0, vtempty) = all_427_2 &
| | |            $i(v0)) |  ? [v0: $i] :  ? [v1: $i] : ( ~ (v0 = vtempty) &
| | |            vrawDifference(v0, all_427_0) = all_442_0 & vrowIn(v1,
| | |              all_427_0) = 0 & vtcons(v1, v0) = all_427_2 & $i(v1) &
| | |            $i(v0))
| | | 
| | | BETA: splitting (162) gives:
| | | 
| | | Case 1:
| | | | 
| | | |   (163)   ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3: int] : ( ~
| | | |            (v3 = 0) &  ~ (v1 = vtempty) & vrawDifference(v1, all_427_0)
| | | |            = v0 & vrowIn(v2, all_427_0) = v3 & vtcons(v2, v1) =
| | | |            all_427_2 & vtcons(v2, v0) = all_442_0 & $i(v2) & $i(v1) &
| | | |            $i(v0))
| | | | 
| | | | DELTA: instantiating (163) with fresh symbols all_755_0, all_755_1,
| | | |        all_755_2, all_755_3 gives:
| | | |   (164)   ~ (all_755_0 = 0) &  ~ (all_755_2 = vtempty) &
| | | |          vrawDifference(all_755_2, all_427_0) = all_755_3 &
| | | |          vrowIn(all_755_1, all_427_0) = all_755_0 & vtcons(all_755_1,
| | | |            all_755_2) = all_427_2 & vtcons(all_755_1, all_755_3) =
| | | |          all_442_0 & $i(all_755_1) & $i(all_755_2) & $i(all_755_3)
| | | | 
| | | | ALPHA: (164) implies:
| | | |   (165)   ~ (all_755_0 = 0)
| | | |   (166)  $i(all_755_2)
| | | |   (167)  $i(all_755_1)
| | | |   (168)  vtcons(all_755_1, all_755_2) = all_427_2
| | | |   (169)  vrowIn(all_755_1, all_427_0) = all_755_0
| | | | 
| | | | GROUND_INST: instantiating (EQ-tcons) with vrow1, all_755_1, all_427_3,
| | | |              all_755_2, all_427_2, simplifying with (23), (35), (41),
| | | |              (166), (167), (168) gives:
| | | |   (170)  all_755_1 = vrow1 & all_755_2 = all_427_3
| | | | 
| | | | ALPHA: (170) implies:
| | | |   (171)  all_755_1 = vrow1
| | | | 
| | | | GROUND_INST: instantiating (4) with all_755_1, vrow3, all_427_1,
| | | |              all_427_0, all_755_0, simplifying with (24), (37), (42),
| | | |              (167), (169) gives:
| | | |   (172)  all_755_0 = 0 | ( ~ (all_755_1 = vrow3) &  ? [v0: int] : ( ~
| | | |              (v0 = 0) & vrowIn(all_755_1, all_427_1) = v0))
| | | | 
| | | | BETA: splitting (172) gives:
| | | | 
| | | | Case 1:
| | | | | 
| | | | |   (173)  all_755_0 = 0
| | | | | 
| | | | | REDUCE: (165), (173) imply:
| | | | |   (174)  $false
| | | | | 
| | | | | CLOSE: (174) is inconsistent.
| | | | | 
| | | | Case 2:
| | | | | 
| | | | |   (175)   ~ (all_755_1 = vrow3) &  ? [v0: int] : ( ~ (v0 = 0) &
| | | | |            vrowIn(all_755_1, all_427_1) = v0)
| | | | | 
| | | | | ALPHA: (175) implies:
| | | | |   (176)   ? [v0: int] : ( ~ (v0 = 0) & vrowIn(all_755_1, all_427_1) =
| | | | |            v0)
| | | | | 
| | | | | DELTA: instantiating (176) with fresh symbol all_783_0 gives:
| | | | |   (177)   ~ (all_783_0 = 0) & vrowIn(all_755_1, all_427_1) = all_783_0
| | | | | 
| | | | | ALPHA: (177) implies:
| | | | |   (178)   ~ (all_783_0 = 0)
| | | | |   (179)  vrowIn(all_755_1, all_427_1) = all_783_0
| | | | | 
| | | | | REDUCE: (171), (179) imply:
| | | | |   (180)  vrowIn(vrow1, all_427_1) = all_783_0
| | | | | 
| | | | | GROUND_INST: instantiating (4) with vrow1, vrow1, vtempty, all_427_1,
| | | | |              all_783_0, simplifying with (21), (23), (40), (180)
| | | | |              gives:
| | | | |   (181)  all_783_0 = 0
| | | | | 
| | | | | REDUCE: (178), (181) imply:
| | | | |   (182)  $false
| | | | | 
| | | | | CLOSE: (182) is inconsistent.
| | | | | 
| | | | End of split
| | | | 
| | | Case 2:
| | | | 
| | | |   (183)   ? [v0: $i] :  ? [v1: int] : (all_442_0 = all_427_2 &  ~ (v1 =
| | | |              0) & vrowIn(v0, all_427_0) = v1 & vtcons(v0, vtempty) =
| | | |            all_427_2 & $i(v0)) |  ? [v0: $i] :  ? [v1: $i] : ( ~ (v0 =
| | | |              vtempty) & vrawDifference(v0, all_427_0) = all_442_0 &
| | | |            vrowIn(v1, all_427_0) = 0 & vtcons(v1, v0) = all_427_2 &
| | | |            $i(v1) & $i(v0))
| | | | 
| | | | BETA: splitting (183) gives:
| | | | 
| | | | Case 1:
| | | | | 
| | | | |   (184)   ? [v0: $i] :  ? [v1: int] : (all_442_0 = all_427_2 &  ~ (v1
| | | | |              = 0) & vrowIn(v0, all_427_0) = v1 & vtcons(v0, vtempty) =
| | | | |            all_427_2 & $i(v0))
| | | | | 
| | | | | DELTA: instantiating (184) with fresh symbols all_755_0, all_755_1
| | | | |        gives:
| | | | |   (185)  all_442_0 = all_427_2 &  ~ (all_755_0 = 0) &
| | | | |          vrowIn(all_755_1, all_427_0) = all_755_0 & vtcons(all_755_1,
| | | | |            vtempty) = all_427_2 & $i(all_755_1)
| | | | | 
| | | | | ALPHA: (185) implies:
| | | | |   (186)  $i(all_755_1)
| | | | |   (187)  vtcons(all_755_1, vtempty) = all_427_2
| | | | | 
| | | | | GROUND_INST: instantiating (EQ-tcons) with vrow1, all_755_1,
| | | | |              all_427_3, vtempty, all_427_2, simplifying with (21),
| | | | |              (23), (35), (41), (186), (187) gives:
| | | | |   (188)  all_755_1 = vrow1 & all_427_3 = vtempty
| | | | | 
| | | | | ALPHA: (188) implies:
| | | | |   (189)  all_427_3 = vtempty
| | | | | 
| | | | | REDUCE: (161), (189) imply:
| | | | |   (190)  $false
| | | | | 
| | | | | CLOSE: (190) is inconsistent.
| | | | | 
| | | | Case 2:
| | | | | 
| | | | |   (191)   ? [v0: $i] :  ? [v1: $i] : ( ~ (v0 = vtempty) &
| | | | |            vrawDifference(v0, all_427_0) = all_442_0 & vrowIn(v1,
| | | | |              all_427_0) = 0 & vtcons(v1, v0) = all_427_2 & $i(v1) &
| | | | |            $i(v0))
| | | | | 
| | | | | DELTA: instantiating (191) with fresh symbols all_755_0, all_755_1
| | | | |        gives:
| | | | |   (192)   ~ (all_755_1 = vtempty) & vrawDifference(all_755_1,
| | | | |            all_427_0) = all_442_0 & vrowIn(all_755_0, all_427_0) = 0 &
| | | | |          vtcons(all_755_0, all_755_1) = all_427_2 & $i(all_755_0) &
| | | | |          $i(all_755_1)
| | | | | 
| | | | | ALPHA: (192) implies:
| | | | |   (193)  $i(all_755_1)
| | | | |   (194)  $i(all_755_0)
| | | | |   (195)  vtcons(all_755_0, all_755_1) = all_427_2
| | | | |   (196)  vrowIn(all_755_0, all_427_0) = 0
| | | | |   (197)  vrawDifference(all_755_1, all_427_0) = all_442_0
| | | | | 
| | | | | GROUND_INST: instantiating (EQ-tcons) with vrow1, all_755_0,
| | | | |              all_427_3, all_755_1, all_427_2, simplifying with (23),
| | | | |              (35), (41), (193), (194), (195) gives:
| | | | |   (198)  all_755_0 = vrow1 & all_755_1 = all_427_3
| | | | | 
| | | | | ALPHA: (198) implies:
| | | | |   (199)  all_755_1 = all_427_3
| | | | |   (200)  all_755_0 = vrow1
| | | | | 
| | | | | GROUND_INST: instantiating (3) with all_755_0, vrow3, all_427_1,
| | | | |              all_427_0, simplifying with (24), (37), (42), (194),
| | | | |              (196) gives:
| | | | |   (201)  all_755_0 = vrow3 | vrowIn(all_755_0, all_427_1) = 0
| | | | | 
| | | | | GROUND_INST: instantiating (rowIn-true-INV) with all_755_0, all_427_0,
| | | | |              simplifying with (38), (194), (196) gives:
| | | | |   (202)   ? [v0: $i] :  ? [v1: $i] :  ? [v2: int] : (vtcons(v0, v1) =
| | | | |            all_427_0 & $i(v1) & $i(v0) & (v0 = all_755_0 | (v2 = 0 &
| | | | |                vrowIn(all_755_0, v1) = 0)))
| | | | | 
| | | | | GROUND_INST: instantiating (14) with all_755_1, all_427_0, all_442_0,
| | | | |              simplifying with (38), (49), (193), (197) gives:
| | | | |   (203)   ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3: int] : ( ~
| | | | |            (v3 = 0) &  ~ (v1 = vtempty) & vrawDifference(v1,
| | | | |              all_427_0) = v0 & vrowIn(v2, all_427_0) = v3 & vtcons(v2,
| | | | |              v1) = all_755_1 & vtcons(v2, v0) = all_442_0 & $i(v2) &
| | | | |            $i(v1) & $i(v0)) |  ? [v0: $i] :  ? [v1: int] : (all_755_1
| | | | |            = all_442_0 &  ~ (v1 = 0) & vrowIn(v0, all_427_0) = v1 &
| | | | |            vtcons(v0, vtempty) = all_442_0 & $i(v0)) |  ? [v0: $i] : 
| | | | |          ? [v1: $i] : ( ~ (v0 = vtempty) & vrawDifference(v0,
| | | | |              all_427_0) = all_442_0 & vrowIn(v1, all_427_0) = 0 &
| | | | |            vtcons(v1, v0) = all_755_1 & $i(v1) & $i(v0)) |  ? [v0: $i]
| | | | |          : (all_442_0 = vtempty & vrowIn(v0, all_427_0) = 0 &
| | | | |            vtcons(v0, vtempty) = all_755_1 & $i(v0)) | (all_755_1 =
| | | | |            all_442_0 & all_427_0 = vtempty) | (all_755_1 = vtempty &
| | | | |            all_442_0 = vtempty)
| | | | | 
| | | | | DELTA: instantiating (202) with fresh symbols all_777_0, all_777_1,
| | | | |        all_777_2 gives:
| | | | |   (204)  vtcons(all_777_2, all_777_1) = all_427_0 & $i(all_777_1) &
| | | | |          $i(all_777_2) & (all_777_2 = all_755_0 | (all_777_0 = 0 &
| | | | |              vrowIn(all_755_0, all_777_1) = 0))
| | | | | 
| | | | | ALPHA: (204) implies:
| | | | |   (205)  $i(all_777_2)
| | | | |   (206)  $i(all_777_1)
| | | | |   (207)  vtcons(all_777_2, all_777_1) = all_427_0
| | | | | 
| | | | | REDUCE: (197), (199) imply:
| | | | |   (208)  vrawDifference(all_427_3, all_427_0) = all_442_0
| | | | | 
| | | | | BETA: splitting (201) gives:
| | | | | 
| | | | | Case 1:
| | | | | | 
| | | | | |   (209)  vrowIn(all_755_0, all_427_1) = 0
| | | | | | 
| | | | | | REDUCE: (200), (209) imply:
| | | | | |   (210)  vrowIn(vrow1, all_427_1) = 0
| | | | | | 
| | | | | | GROUND_INST: instantiating (EQ-tcons) with vrow3, all_777_2,
| | | | | |              all_427_1, all_777_1, all_427_0, simplifying with (24),
| | | | | |              (37), (42), (205), (206), (207) gives:
| | | | | |   (211)  all_777_1 = all_427_1 & all_777_2 = vrow3
| | | | | | 
| | | | | | ALPHA: (211) implies:
| | | | | |   (212)  all_777_2 = vrow3
| | | | | |   (213)  all_777_1 = all_427_1
| | | | | | 
| | | | | | GROUND_INST: instantiating (rowIn-true-INV) with vrow1, all_427_1,
| | | | | |              simplifying with (23), (37), (210) gives:
| | | | | |   (214)   ? [v0: $i] :  ? [v1: $i] :  ? [v2: int] : (vtcons(v0, v1)
| | | | | |            = all_427_1 & $i(v1) & $i(v0) & (v0 = vrow1 | (v2 = 0 &
| | | | | |                vrowIn(vrow1, v1) = 0)))
| | | | | | 
| | | | | | GROUND_INST: instantiating (11) with vrow2, all_427_0, all_427_3,
| | | | | |              all_442_0, simplifying with (22), (38), (39), (208)
| | | | | |              gives:
| | | | | |   (215)  all_442_0 = all_427_3 | vrowIn(vrow2, all_427_0) = 0
| | | | | | 
| | | | | | GROUND_INST: instantiating (12) with vrow2, all_427_0, all_427_3,
| | | | | |              all_442_0, simplifying with (22), (38), (39), (208)
| | | | | |              gives:
| | | | | |   (216)  all_442_0 = vtempty |  ? [v0: int] : ( ~ (v0 = 0) &
| | | | | |            vrowIn(vrow2, all_427_0) = v0)
| | | | | | 
| | | | | | DELTA: instantiating (214) with fresh symbols all_847_0, all_847_1,
| | | | | |        all_847_2 gives:
| | | | | |   (217)  vtcons(all_847_2, all_847_1) = all_427_1 & $i(all_847_1) &
| | | | | |          $i(all_847_2) & (all_847_2 = vrow1 | (all_847_0 = 0 &
| | | | | |              vrowIn(vrow1, all_847_1) = 0))
| | | | | | 
| | | | | | ALPHA: (217) implies:
| | | | | |   (218)  $i(all_847_2)
| | | | | |   (219)  $i(all_847_1)
| | | | | |   (220)  vtcons(all_847_2, all_847_1) = all_427_1
| | | | | | 
| | | | | | BETA: splitting (215) gives:
| | | | | | 
| | | | | | Case 1:
| | | | | | | 
| | | | | | |   (221)  vrowIn(vrow2, all_427_0) = 0
| | | | | | | 
| | | | | | | BETA: splitting (216) gives:
| | | | | | | 
| | | | | | | Case 1:
| | | | | | | | 
| | | | | | | |   (222)  all_442_0 = vtempty
| | | | | | | | 
| | | | | | | | REDUCE: (48), (222) imply:
| | | | | | | |   (223)   ~ (all_427_3 = vtempty)
| | | | | | | | 
| | | | | | | | GROUND_INST: instantiating (EQ-tcons) with vrow1, all_847_2,
| | | | | | | |              vtempty, all_847_1, all_427_1, simplifying with
| | | | | | | |              (21), (23), (40), (218), (219), (220) gives:
| | | | | | | |   (224)  all_847_1 = vtempty & all_847_2 = vrow1
| | | | | | | | 
| | | | | | | | ALPHA: (224) implies:
| | | | | | | |   (225)  all_847_2 = vrow1
| | | | | | | |   (226)  all_847_1 = vtempty
| | | | | | | | 
| | | | | | | | GROUND_INST: instantiating (3) with vrow2, vrow3, all_427_1,
| | | | | | | |              all_427_0, simplifying with (22), (24), (37), (42),
| | | | | | | |              (221) gives:
| | | | | | | |   (227)  vrow3 = vrow2 | vrowIn(vrow2, all_427_1) = 0
| | | | | | | | 
| | | | | | | | BETA: splitting (227) gives:
| | | | | | | | 
| | | | | | | | Case 1:
| | | | | | | | | 
| | | | | | | | |   (228)  vrowIn(vrow2, all_427_1) = 0
| | | | | | | | | 
| | | | | | | | | BETA: splitting (203) gives:
| | | | | | | | | 
| | | | | | | | | Case 1:
| | | | | | | | | | 
| | | | | | | | | |   (229)   ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3:
| | | | | | | | | |            int] : ( ~ (v3 = 0) &  ~ (v1 = vtempty) &
| | | | | | | | | |            vrawDifference(v1, all_427_0) = v0 & vrowIn(v2,
| | | | | | | | | |              all_427_0) = v3 & vtcons(v2, v1) = all_755_1 &
| | | | | | | | | |            vtcons(v2, v0) = all_442_0 & $i(v2) & $i(v1) &
| | | | | | | | | |            $i(v0)) |  ? [v0: $i] :  ? [v1: int] : (all_755_1
| | | | | | | | | |            = all_442_0 &  ~ (v1 = 0) & vrowIn(v0, all_427_0)
| | | | | | | | | |            = v1 & vtcons(v0, vtempty) = all_442_0 & $i(v0))
| | | | | | | | | |          |  ? [v0: $i] :  ? [v1: $i] : ( ~ (v0 = vtempty) &
| | | | | | | | | |            vrawDifference(v0, all_427_0) = all_442_0 &
| | | | | | | | | |            vrowIn(v1, all_427_0) = 0 & vtcons(v1, v0) =
| | | | | | | | | |            all_755_1 & $i(v1) & $i(v0))
| | | | | | | | | | 
| | | | | | | | | | BETA: splitting (229) gives:
| | | | | | | | | | 
| | | | | | | | | | Case 1:
| | | | | | | | | | | 
| | | | | | | | | | |   (230)   ? [v0: $i] :  ? [v1: $i] :  ? [v2: $i] :  ? [v3:
| | | | | | | | | | |            int] : ( ~ (v3 = 0) &  ~ (v1 = vtempty) &
| | | | | | | | | | |            vrawDifference(v1, all_427_0) = v0 & vrowIn(v2,
| | | | | | | | | | |              all_427_0) = v3 & vtcons(v2, v1) = all_755_1 &
| | | | | | | | | | |            vtcons(v2, v0) = all_442_0 & $i(v2) & $i(v1) &
| | | | | | | | | | |            $i(v0))
| | | | | | | | | | | 
| | | | | | | | | | | DELTA: instantiating (230) with fresh symbols all_973_0,
| | | | | | | | | | |        all_973_1, all_973_2, all_973_3 gives:
| | | | | | | | | | |   (231)   ~ (all_973_0 = 0) &  ~ (all_973_2 = vtempty) &
| | | | | | | | | | |          vrawDifference(all_973_2, all_427_0) = all_973_3 &
| | | | | | | | | | |          vrowIn(all_973_1, all_427_0) = all_973_0 &
| | | | | | | | | | |          vtcons(all_973_1, all_973_2) = all_755_1 &
| | | | | | | | | | |          vtcons(all_973_1, all_973_3) = all_442_0 &
| | | | | | | | | | |          $i(all_973_1) & $i(all_973_2) & $i(all_973_3)
| | | | | | | | | | | 
| | | | | | | | | | | ALPHA: (231) implies:
| | | | | | | | | | |   (232)  $i(all_973_3)
| | | | | | | | | | |   (233)  $i(all_973_1)
| | | | | | | | | | |   (234)  vtcons(all_973_1, all_973_3) = all_442_0
| | | | | | | | | | | 
| | | | | | | | | | | REDUCE: (222), (234) imply:
| | | | | | | | | | |   (235)  vtcons(all_973_1, all_973_3) = vtempty
| | | | | | | | | | | 
| | | | | | | | | | | GROUND_INST: instantiating (1) with all_973_1, all_973_3,
| | | | | | | | | | |              simplifying with (232), (233), (235) gives:
| | | | | | | | | | |   (236)  $false
| | | | | | | | | | | 
| | | | | | | | | | | CLOSE: (236) is inconsistent.
| | | | | | | | | | | 
| | | | | | | | | | Case 2:
| | | | | | | | | | | 
| | | | | | | | | | |   (237)   ? [v0: $i] :  ? [v1: int] : (all_755_1 =
| | | | | | | | | | |            all_442_0 &  ~ (v1 = 0) & vrowIn(v0, all_427_0)
| | | | | | | | | | |            = v1 & vtcons(v0, vtempty) = all_442_0 & $i(v0))
| | | | | | | | | | |          |  ? [v0: $i] :  ? [v1: $i] : ( ~ (v0 = vtempty) &
| | | | | | | | | | |            vrawDifference(v0, all_427_0) = all_442_0 &
| | | | | | | | | | |            vrowIn(v1, all_427_0) = 0 & vtcons(v1, v0) =
| | | | | | | | | | |            all_755_1 & $i(v1) & $i(v0))
| | | | | | | | | | | 
| | | | | | | | | | | BETA: splitting (237) gives:
| | | | | | | | | | | 
| | | | | | | | | | | Case 1:
| | | | | | | | | | | | 
| | | | | | | | | | | |   (238)   ? [v0: $i] :  ? [v1: int] : (all_755_1 =
| | | | | | | | | | | |            all_442_0 &  ~ (v1 = 0) & vrowIn(v0, all_427_0)
| | | | | | | | | | | |            = v1 & vtcons(v0, vtempty) = all_442_0 & $i(v0))
| | | | | | | | | | | | 
| | | | | | | | | | | | DELTA: instantiating (238) with fresh symbols all_973_0,
| | | | | | | | | | | |        all_973_1 gives:
| | | | | | | | | | | |   (239)  all_755_1 = all_442_0 &  ~ (all_973_0 = 0) &
| | | | | | | | | | | |          vrowIn(all_973_1, all_427_0) = all_973_0 &
| | | | | | | | | | | |          vtcons(all_973_1, vtempty) = all_442_0 &
| | | | | | | | | | | |          $i(all_973_1)
| | | | | | | | | | | | 
| | | | | | | | | | | | ALPHA: (239) implies:
| | | | | | | | | | | |   (240)  all_755_1 = all_442_0
| | | | | | | | | | | | 
| | | | | | | | | | | | COMBINE_EQS: (199), (240) imply:
| | | | | | | | | | | |   (241)  all_442_0 = all_427_3
| | | | | | | | | | | | 
| | | | | | | | | | | | COMBINE_EQS: (222), (241) imply:
| | | | | | | | | | | |   (242)  all_427_3 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | SIMP: (242) implies:
| | | | | | | | | | | |   (243)  all_427_3 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | REDUCE: (161), (243) imply:
| | | | | | | | | | | |   (244)  $false
| | | | | | | | | | | | 
| | | | | | | | | | | | CLOSE: (244) is inconsistent.
| | | | | | | | | | | | 
| | | | | | | | | | | Case 2:
| | | | | | | | | | | | 
| | | | | | | | | | | |   (245)   ? [v0: $i] :  ? [v1: $i] : ( ~ (v0 = vtempty) &
| | | | | | | | | | | |            vrawDifference(v0, all_427_0) = all_442_0 &
| | | | | | | | | | | |            vrowIn(v1, all_427_0) = 0 & vtcons(v1, v0) =
| | | | | | | | | | | |            all_755_1 & $i(v1) & $i(v0))
| | | | | | | | | | | | 
| | | | | | | | | | | | DELTA: instantiating (245) with fresh symbols all_973_0,
| | | | | | | | | | | |        all_973_1 gives:
| | | | | | | | | | | |   (246)   ~ (all_973_1 = vtempty) &
| | | | | | | | | | | |          vrawDifference(all_973_1, all_427_0) = all_442_0 &
| | | | | | | | | | | |          vrowIn(all_973_0, all_427_0) = 0 &
| | | | | | | | | | | |          vtcons(all_973_0, all_973_1) = all_755_1 &
| | | | | | | | | | | |          $i(all_973_0) & $i(all_973_1)
| | | | | | | | | | | | 
| | | | | | | | | | | | ALPHA: (246) implies:
| | | | | | | | | | | |   (247)   ~ (all_973_1 = vtempty)
| | | | | | | | | | | |   (248)  $i(all_973_1)
| | | | | | | | | | | |   (249)  $i(all_973_0)
| | | | | | | | | | | |   (250)  vtcons(all_973_0, all_973_1) = all_755_1
| | | | | | | | | | | | 
| | | | | | | | | | | | REDUCE: (199), (250) imply:
| | | | | | | | | | | |   (251)  vtcons(all_973_0, all_973_1) = all_427_3
| | | | | | | | | | | | 
| | | | | | | | | | | | GROUND_INST: instantiating (EQ-tcons) with vrow2, all_973_0,
| | | | | | | | | | | |              vtempty, all_973_1, all_427_3, simplifying with
| | | | | | | | | | | |              (21), (22), (39), (248), (249), (251) gives:
| | | | | | | | | | | |   (252)  all_973_0 = vrow2 & all_973_1 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | ALPHA: (252) implies:
| | | | | | | | | | | |   (253)  all_973_1 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | REDUCE: (247), (253) imply:
| | | | | | | | | | | |   (254)  $false
| | | | | | | | | | | | 
| | | | | | | | | | | | CLOSE: (254) is inconsistent.
| | | | | | | | | | | | 
| | | | | | | | | | | End of split
| | | | | | | | | | | 
| | | | | | | | | | End of split
| | | | | | | | | | 
| | | | | | | | | Case 2:
| | | | | | | | | | 
| | | | | | | | | |   (255)   ? [v0: $i] : (all_442_0 = vtempty & vrowIn(v0,
| | | | | | | | | |              all_427_0) = 0 & vtcons(v0, vtempty) =
| | | | | | | | | |            all_755_1 & $i(v0)) | (all_755_1 = all_442_0 &
| | | | | | | | | |            all_427_0 = vtempty) | (all_755_1 = vtempty &
| | | | | | | | | |            all_442_0 = vtempty)
| | | | | | | | | | 
| | | | | | | | | | BETA: splitting (255) gives:
| | | | | | | | | | 
| | | | | | | | | | Case 1:
| | | | | | | | | | | 
| | | | | | | | | | |   (256)   ? [v0: $i] : (all_442_0 = vtempty & vrowIn(v0,
| | | | | | | | | | |              all_427_0) = 0 & vtcons(v0, vtempty) =
| | | | | | | | | | |            all_755_1 & $i(v0))
| | | | | | | | | | | 
| | | | | | | | | | | DELTA: instantiating (256) with fresh symbol all_973_0
| | | | | | | | | | |        gives:
| | | | | | | | | | |   (257)  all_442_0 = vtempty & vrowIn(all_973_0, all_427_0)
| | | | | | | | | | |          = 0 & vtcons(all_973_0, vtempty) = all_755_1 &
| | | | | | | | | | |          $i(all_973_0)
| | | | | | | | | | | 
| | | | | | | | | | | ALPHA: (257) implies:
| | | | | | | | | | |   (258)  $i(all_973_0)
| | | | | | | | | | |   (259)  vtcons(all_973_0, vtempty) = all_755_1
| | | | | | | | | | | 
| | | | | | | | | | | REDUCE: (199), (259) imply:
| | | | | | | | | | |   (260)  vtcons(all_973_0, vtempty) = all_427_3
| | | | | | | | | | | 
| | | | | | | | | | | GROUND_INST: instantiating (EQ-tcons) with vrow2, all_973_0,
| | | | | | | | | | |              vtempty, vtempty, all_427_3, simplifying with
| | | | | | | | | | |              (21), (22), (39), (258), (260) gives:
| | | | | | | | | | |   (261)  all_973_0 = vrow2
| | | | | | | | | | | 
| | | | | | | | | | | GROUND_INST: instantiating (3) with vrow2, vrow1, vtempty,
| | | | | | | | | | |              all_427_1, simplifying with (21), (22), (23),
| | | | | | | | | | |              (40), (228) gives:
| | | | | | | | | | |   (262)  vrow1 = vrow2 | vrowIn(vrow2, vtempty) = 0
| | | | | | | | | | | 
| | | | | | | | | | | BETA: splitting (262) gives:
| | | | | | | | | | | 
| | | | | | | | | | | Case 1:
| | | | | | | | | | | | 
| | | | | | | | | | | |   (263)  vrowIn(vrow2, vtempty) = 0
| | | | | | | | | | | | 
| | | | | | | | | | | | GROUND_INST: instantiating (2) with vrow2, simplifying with
| | | | | | | | | | | |              (22), (263) gives:
| | | | | | | | | | | |   (264)  $false
| | | | | | | | | | | | 
| | | | | | | | | | | | CLOSE: (264) is inconsistent.
| | | | | | | | | | | | 
| | | | | | | | | | | Case 2:
| | | | | | | | | | | | 
| | | | | | | | | | | |   (265)  vrow1 = vrow2
| | | | | | | | | | | | 
| | | | | | | | | | | | REDUCE: (18), (265) imply:
| | | | | | | | | | | |   (266)  $false
| | | | | | | | | | | | 
| | | | | | | | | | | | CLOSE: (266) is inconsistent.
| | | | | | | | | | | | 
| | | | | | | | | | | End of split
| | | | | | | | | | | 
| | | | | | | | | | Case 2:
| | | | | | | | | | | 
| | | | | | | | | | |   (267)  (all_755_1 = all_442_0 & all_427_0 = vtempty) |
| | | | | | | | | | |          (all_755_1 = vtempty & all_442_0 = vtempty)
| | | | | | | | | | | 
| | | | | | | | | | | BETA: splitting (267) gives:
| | | | | | | | | | | 
| | | | | | | | | | | Case 1:
| | | | | | | | | | | | 
| | | | | | | | | | | |   (268)  all_755_1 = all_442_0 & all_427_0 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | ALPHA: (268) implies:
| | | | | | | | | | | |   (269)  all_755_1 = all_442_0
| | | | | | | | | | | | 
| | | | | | | | | | | | COMBINE_EQS: (199), (269) imply:
| | | | | | | | | | | |   (270)  all_442_0 = all_427_3
| | | | | | | | | | | | 
| | | | | | | | | | | | SIMP: (270) implies:
| | | | | | | | | | | |   (271)  all_442_0 = all_427_3
| | | | | | | | | | | | 
| | | | | | | | | | | | COMBINE_EQS: (222), (271) imply:
| | | | | | | | | | | |   (272)  all_427_3 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | SIMP: (272) implies:
| | | | | | | | | | | |   (273)  all_427_3 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | REDUCE: (161), (273) imply:
| | | | | | | | | | | |   (274)  $false
| | | | | | | | | | | | 
| | | | | | | | | | | | CLOSE: (274) is inconsistent.
| | | | | | | | | | | | 
| | | | | | | | | | | Case 2:
| | | | | | | | | | | | 
| | | | | | | | | | | |   (275)  all_755_1 = vtempty & all_442_0 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | ALPHA: (275) implies:
| | | | | | | | | | | |   (276)  all_755_1 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | COMBINE_EQS: (199), (276) imply:
| | | | | | | | | | | |   (277)  all_427_3 = vtempty
| | | | | | | | | | | | 
| | | | | | | | | | | | REDUCE: (161), (277) imply:
| | | | | | | | | | | |   (278)  $false
| | | | | | | | | | | | 
| | | | | | | | | | | | CLOSE: (278) is inconsistent.
| | | | | | | | | | | | 
| | | | | | | | | | | End of split
| | | | | | | | | | | 
| | | | | | | | | | End of split
| | | | | | | | | | 
| | | | | | | | | End of split
| | | | | | | | | 
| | | | | | | | Case 2:
| | | | | | | | | 
| | | | | | | | |   (279)  vrow3 = vrow2
| | | | | | | | | 
| | | | | | | | | REDUCE: (20), (279) imply:
| | | | | | | | |   (280)  $false
| | | | | | | | | 
| | | | | | | | | CLOSE: (280) is inconsistent.
| | | | | | | | | 
| | | | | | | | End of split
| | | | | | | | 
| | | | | | | Case 2:
| | | | | | | | 
| | | | | | | |   (281)   ? [v0: int] : ( ~ (v0 = 0) & vrowIn(vrow2, all_427_0)
| | | | | | | |            = v0)
| | | | | | | | 
| | | | | | | | DELTA: instantiating (281) with fresh symbol all_867_0 gives:
| | | | | | | |   (282)   ~ (all_867_0 = 0) & vrowIn(vrow2, all_427_0) =
| | | | | | | |          all_867_0
| | | | | | | | 
| | | | | | | | ALPHA: (282) implies:
| | | | | | | |   (283)   ~ (all_867_0 = 0)
| | | | | | | |   (284)  vrowIn(vrow2, all_427_0) = all_867_0
| | | | | | | | 
| | | | | | | | GROUND_INST: instantiating (31) with 0, all_867_0, all_427_0,
| | | | | | | |              vrow2, simplifying with (221), (284) gives:
| | | | | | | |   (285)  all_867_0 = 0
| | | | | | | | 
| | | | | | | | REDUCE: (283), (285) imply:
| | | | | | | |   (286)  $false
| | | | | | | | 
| | | | | | | | CLOSE: (286) is inconsistent.
| | | | | | | | 
| | | | | | | End of split
| | | | | | | 
| | | | | | Case 2:
| | | | | | | 
| | | | | | |   (287)  all_442_0 = all_427_3
| | | | | | | 
| | | | | | | REDUCE: (48), (287) imply:
| | | | | | |   (288)  $false
| | | | | | | 
| | | | | | | CLOSE: (288) is inconsistent.
| | | | | | | 
| | | | | | End of split
| | | | | | 
| | | | | Case 2:
| | | | | | 
| | | | | |   (289)  all_755_0 = vrow3
| | | | | | 
| | | | | | COMBINE_EQS: (200), (289) imply:
| | | | | |   (290)  vrow3 = vrow1
| | | | | | 
| | | | | | SIMP: (290) implies:
| | | | | |   (291)  vrow3 = vrow1
| | | | | | 
| | | | | | REDUCE: (19), (291) imply:
| | | | | |   (292)  $false
| | | | | | 
| | | | | | CLOSE: (292) is inconsistent.
| | | | | | 
| | | | | End of split
| | | | | 
| | | | End of split
| | | | 
| | | End of split
| | | 
| | Case 2:
| | | 
| | |   (293)   ? [v0: $i] : (all_442_0 = vtempty & vrowIn(v0, all_427_0) = 0 &
| | |            vtcons(v0, vtempty) = all_427_2 & $i(v0)) | (all_442_0 =
| | |            all_427_2 & all_427_0 = vtempty) | (all_442_0 = vtempty &
| | |            all_427_2 = vtempty)
| | | 
| | | BETA: splitting (293) gives:
| | | 
| | | Case 1:
| | | | 
| | | |   (294)   ? [v0: $i] : (all_442_0 = vtempty & vrowIn(v0, all_427_0) = 0
| | | |            & vtcons(v0, vtempty) = all_427_2 & $i(v0))
| | | | 
| | | | DELTA: instantiating (294) with fresh symbol all_755_0 gives:
| | | |   (295)  all_442_0 = vtempty & vrowIn(all_755_0, all_427_0) = 0 &
| | | |          vtcons(all_755_0, vtempty) = all_427_2 & $i(all_755_0)
| | | | 
| | | | ALPHA: (295) implies:
| | | |   (296)  all_442_0 = vtempty
| | | |   (297)  $i(all_755_0)
| | | |   (298)  vtcons(all_755_0, vtempty) = all_427_2
| | | | 
| | | | REDUCE: (48), (296) imply:
| | | |   (299)   ~ (all_427_3 = vtempty)
| | | | 
| | | | GROUND_INST: instantiating (EQ-tcons) with vrow1, all_755_0, all_427_3,
| | | |              vtempty, all_427_2, simplifying with (21), (23), (35),
| | | |              (41), (297), (298) gives:
| | | |   (300)  all_755_0 = vrow1 & all_427_3 = vtempty
| | | | 
| | | | ALPHA: (300) implies:
| | | |   (301)  all_427_3 = vtempty
| | | | 
| | | | REDUCE: (161), (301) imply:
| | | |   (302)  $false
| | | | 
| | | | CLOSE: (302) is inconsistent.
| | | | 
| | | Case 2:
| | | | 
| | | |   (303)  (all_442_0 = all_427_2 & all_427_0 = vtempty) | (all_442_0 =
| | | |            vtempty & all_427_2 = vtempty)
| | | | 
| | | | BETA: splitting (303) gives:
| | | | 
| | | | Case 1:
| | | | | 
| | | | |   (304)  all_442_0 = all_427_2 & all_427_0 = vtempty
| | | | | 
| | | | | ALPHA: (304) implies:
| | | | |   (305)  all_427_0 = vtempty
| | | | | 
| | | | | REDUCE: (42), (305) imply:
| | | | |   (306)  vtcons(vrow3, all_427_1) = vtempty
| | | | | 
| | | | | GROUND_INST: instantiating (1) with vrow3, all_427_1, simplifying with
| | | | |              (24), (37), (306) gives:
| | | | |   (307)  $false
| | | | | 
| | | | | CLOSE: (307) is inconsistent.
| | | | | 
| | | | Case 2:
| | | | | 
| | | | |   (308)  all_442_0 = vtempty & all_427_2 = vtempty
| | | | | 
| | | | | ALPHA: (308) implies:
| | | | |   (309)  all_427_2 = vtempty
| | | | | 
| | | | | REDUCE: (41), (309) imply:
| | | | |   (310)  vtcons(vrow1, all_427_3) = vtempty
| | | | | 
| | | | | GROUND_INST: instantiating (1) with vrow1, all_427_3, simplifying with
| | | | |              (23), (35), (310) gives:
| | | | |   (311)  $false
| | | | | 
| | | | | CLOSE: (311) is inconsistent.
| | | | | 
| | | | End of split
| | | | 
| | | End of split
| | | 
| | End of split
| | 
| End of split
| 
End of proof
% SZS output end Proof for theBenchmark
Loading ARI495=1.p ...
Warning: Problem contains reals, using incomplete axiomatisation
Preprocessing ...
Proving ...

% SZS status Theorem for ARI495=1.p
Loading finite-domains-1.p ...
Preprocessing ...
Proving ...

% SZS status Timeout for finite-domains-1.p
Loading SYN455+1-simp.p ...
Preprocessing ...
Constructing countermodel ...

% SZS status GaveUp for SYN455+1-simp.p

Possible countermodel:
a942 = $i!32 & a933 = $i!30 & a954 = $i!28 & a949 = $i!26 & a946 = $i!24 & a926 = $i!22 & a924 = $i!20 & a923 = $i!18 & a921 = $i!16 & a917 = $i!14 & a912 = $i!12 & a909 = $i!10 & a907 = $i!8 & a906 = $i!6 & a905 = $i!4 & a903 = $i!2 & c3_1($i!32) & c3_1($i!30) & c3_1($i!28) & c3_1($i!26) & !c3_1($i!24) & !c3_1($i!22) & c3_1($i!20) & c3_1($i!18) & !c3_1($i!16) & c3_1($i!14) & c3_1($i!12) & !c3_1($i!10) & c3_1($i!8) & !c3_1($i!6) & c3_1($i!4) & !c3_1($i!2) & c1_1($i!32) & c1_1($i!28) & !c1_1($i!26) & c1_1($i!22) & !c1_1($i!20) & !c1_1($i!18) & c1_1($i!14) & c1_1($i!12) & c1_1($i!10) & c1_1($i!8) & c0_1($i!32) & c0_1($i!30) & !c0_1($i!28) & !c0_1($i!26) & !c0_1($i!24) & !c0_1($i!22) & !c0_1($i!20) & !c0_1($i!18) & !c0_1($i!16) & !c0_1($i!14) & !c0_1($i!12) & !c0_1($i!10) & c0_1($i!8) & c0_1($i!6) & !c0_1($i!4) & c0_1($i!2) & c2_1($i!32) & c2_1($i!30) & c2_1($i!28) & c2_1($i!26) & !c2_1($i!24) & c2_1($i!22) & c2_1($i!20) & c2_1($i!18) & c2_1($i!16) & !c2_1($i!14) & c2_1($i!12) & c2_1($i!10) & !c2_1($i!8) & c2_1($i!6) & !c2_1($i!4) & !c2_1($i!2) & ndr1_0 & hskp2 & hskp4 & hskp5 & hskp6 & hskp8 & hskp10 & hskp12 & hskp13 & hskp14 & hskp15 & hskp16 & hskp21 & hskp22 & hskp23 & hskp29 & hskp30 & !hskp0 & !hskp1 & !hskp3 & !hskp7 & !hskp9 & !hskp11 & !hskp17 & !hskp18 & !hskp19 & !hskp20 & !hskp24 & !hskp25 & !hskp26 & !hskp27 & !hskp28
